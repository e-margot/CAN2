
test_my.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080044a8  080044a8  000144a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044d8  080044d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080044d8  080044d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044d8  080044d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044d8  080044d8  000144d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044dc  080044dc  000144dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080044e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000000c  080044ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  080044ec  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c569  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df1  00000000  00000000  0002c59d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  0002e390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  0002ef68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c87  00000000  00000000  0002fa58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5d7  00000000  00000000  000486df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091171  00000000  00000000  00055cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6e27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a50  00000000  00000000  000e6e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004490 	.word	0x08004490

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004490 	.word	0x08004490

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]

        flag = 1;
 8000228:	4b03      	ldr	r3, [pc, #12]	; (8000238 <HAL_ADC_ConvCpltCallback+0x18>)
 800022a:	2201      	movs	r2, #1
 800022c:	701a      	strb	r2, [r3, #0]

}
 800022e:	46c0      	nop			; (mov r8, r8)
 8000230:	46bd      	mov	sp, r7
 8000232:	b002      	add	sp, #8
 8000234:	bd80      	pop	{r7, pc}
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	20000044 	.word	0x20000044

0800023c <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
    if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000244:	4b09      	ldr	r3, [pc, #36]	; (800026c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000246:	4a0a      	ldr	r2, [pc, #40]	; (8000270 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	2100      	movs	r1, #0
 800024c:	f001 fe26 	bl	8001e9c <HAL_CAN_GetRxMessage>
 8000250:	1e03      	subs	r3, r0, #0
 8000252:	d106      	bne.n	8000262 <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
    {
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000254:	2380      	movs	r3, #128	; 0x80
 8000256:	019b      	lsls	r3, r3, #6
 8000258:	4a06      	ldr	r2, [pc, #24]	; (8000274 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800025a:	0019      	movs	r1, r3
 800025c:	0010      	movs	r0, r2
 800025e:	f002 fdaa 	bl	8002db6 <HAL_GPIO_TogglePin>
    }
}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	46bd      	mov	sp, r7
 8000266:	b002      	add	sp, #8
 8000268:	bd80      	pop	{r7, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	20000028 	.word	0x20000028
 8000270:	20000118 	.word	0x20000118
 8000274:	48000800 	.word	0x48000800

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800027c:	f000 fcce 	bl	8000c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000280:	f000 f87a 	bl	8000378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000284:	f000 fa7e 	bl	8000784 <MX_GPIO_Init>
  MX_DMA_Init();
 8000288:	f000 fa5e 	bl	8000748 <MX_DMA_Init>
  MX_CAN_Init();
 800028c:	f000 f97c 	bl	8000588 <MX_CAN_Init>
  MX_ADC_Init();
 8000290:	f000 f8c4 	bl	800041c <MX_ADC_Init>
  MX_TIM3_Init();
 8000294:	f000 f9d8 	bl	8000648 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc);
 8000298:	4b2b      	ldr	r3, [pc, #172]	; (8000348 <main+0xd0>)
 800029a:	0018      	movs	r0, r3
 800029c:	f001 fa4c 	bl	8001738 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc, 8);
 80002a0:	492a      	ldr	r1, [pc, #168]	; (800034c <main+0xd4>)
 80002a2:	4b29      	ldr	r3, [pc, #164]	; (8000348 <main+0xd0>)
 80002a4:	2208      	movs	r2, #8
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 fe80 	bl	8000fac <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80002ac:	4b28      	ldr	r3, [pc, #160]	; (8000350 <main+0xd8>)
 80002ae:	210c      	movs	r1, #12
 80002b0:	0018      	movs	r0, r3
 80002b2:	f003 fb23 	bl	80038fc <HAL_TIM_PWM_Start>
  TxHeader.StdId = 0x0378;
 80002b6:	4b27      	ldr	r3, [pc, #156]	; (8000354 <main+0xdc>)
 80002b8:	22de      	movs	r2, #222	; 0xde
 80002ba:	0092      	lsls	r2, r2, #2
 80002bc:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0;
 80002be:	4b25      	ldr	r3, [pc, #148]	; (8000354 <main+0xdc>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 80002c4:	4b23      	ldr	r3, [pc, #140]	; (8000354 <main+0xdc>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;   // CAN_ID_EXT
 80002ca:	4b22      	ldr	r3, [pc, #136]	; (8000354 <main+0xdc>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 80002d0:	4b20      	ldr	r3, [pc, #128]	; (8000354 <main+0xdc>)
 80002d2:	2208      	movs	r2, #8
 80002d4:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = 0;
 80002d6:	4b1f      	ldr	r3, [pc, #124]	; (8000354 <main+0xdc>)
 80002d8:	2200      	movs	r2, #0
 80002da:	751a      	strb	r2, [r3, #20]

  HAL_CAN_Start(&hcan);
 80002dc:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <main+0xe0>)
 80002de:	0018      	movs	r0, r3
 80002e0:	f001 fcb8 	bl	8001c54 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE);
 80002e4:	4a1d      	ldr	r2, [pc, #116]	; (800035c <main+0xe4>)
 80002e6:	4b1c      	ldr	r3, [pc, #112]	; (8000358 <main+0xe0>)
 80002e8:	0011      	movs	r1, r2
 80002ea:	0018      	movs	r0, r3
 80002ec:	f001 fef2 	bl	80020d4 <HAL_CAN_ActivateNotification>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 //while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0);
	 	 	 if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, adc, &TxMailbox) == HAL_OK)
 80002f0:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <main+0xe8>)
 80002f2:	4a16      	ldr	r2, [pc, #88]	; (800034c <main+0xd4>)
 80002f4:	4917      	ldr	r1, [pc, #92]	; (8000354 <main+0xdc>)
 80002f6:	4818      	ldr	r0, [pc, #96]	; (8000358 <main+0xe0>)
 80002f8:	f001 fcf2 	bl	8001ce0 <HAL_CAN_AddTxMessage>
 80002fc:	1e03      	subs	r3, r0, #0
 80002fe:	d104      	bne.n	800030a <main+0x92>
	         // if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
	          {
	 	 		++can_count;//  HAL_UART_Transmit(&huart1, (uint8_t*)"ER SEND\n", 8, 100);
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <main+0xec>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	1c5a      	adds	r2, r3, #1
 8000306:	4b17      	ldr	r3, [pc, #92]	; (8000364 <main+0xec>)
 8000308:	601a      	str	r2, [r3, #0]
	          }
	 	 	  HAL_Delay(5);
 800030a:	2005      	movs	r0, #5
 800030c:	f000 fcea 	bl	8000ce4 <HAL_Delay>
	         // HAL_Delay(500);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TIM3->CCR4 = 8888;
 8000310:	4b15      	ldr	r3, [pc, #84]	; (8000368 <main+0xf0>)
 8000312:	4a16      	ldr	r2, [pc, #88]	; (800036c <main+0xf4>)
 8000314:	641a      	str	r2, [r3, #64]	; 0x40
	  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8000316:	4b16      	ldr	r3, [pc, #88]	; (8000370 <main+0xf8>)
 8000318:	2201      	movs	r2, #1
 800031a:	2101      	movs	r1, #1
 800031c:	0018      	movs	r0, r3
 800031e:	f002 fd2d 	bl	8002d7c <HAL_GPIO_WritePin>
//	  HAL_ADC_PollForConversion(&hadc, 100); // ожидаем окончания преобразования
//	  adc = HAL_ADC_GetValue(&hadc); // читаем полученное значение в переменную adc
//	  HAL_ADC_Stop(&hadc); // останавливаем АЦП (не обязательно)
//	  HAL_Delay(100);

 if(flag)
 8000322:	4b14      	ldr	r3, [pc, #80]	; (8000374 <main+0xfc>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	b2db      	uxtb	r3, r3
 8000328:	2b00      	cmp	r3, #0
 800032a:	d0e1      	beq.n	80002f0 <main+0x78>
	  {
	        flag = 0;
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <main+0xfc>)
 800032e:	2200      	movs	r2, #0
 8000330:	701a      	strb	r2, [r3, #0]

	        HAL_ADC_Stop_DMA(&hadc); // это необязательно
 8000332:	4b05      	ldr	r3, [pc, #20]	; (8000348 <main+0xd0>)
 8000334:	0018      	movs	r0, r3
 8000336:	f000 febb 	bl	80010b0 <HAL_ADC_Stop_DMA>
//	        adc[3] = 0;
//	        adc[4] = 0;
//	        adc[5] = 0;
//	        adc[6] = 0;
//	        adc[7] = 0;
	        HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc, 8);
 800033a:	4904      	ldr	r1, [pc, #16]	; (800034c <main+0xd4>)
 800033c:	4b02      	ldr	r3, [pc, #8]	; (8000348 <main+0xd0>)
 800033e:	2208      	movs	r2, #8
 8000340:	0018      	movs	r0, r3
 8000342:	f000 fe33 	bl	8000fac <HAL_ADC_Start_DMA>
	 	 	 if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, adc, &TxMailbox) == HAL_OK)
 8000346:	e7d3      	b.n	80002f0 <main+0x78>
 8000348:	20000134 	.word	0x20000134
 800034c:	20000034 	.word	0x20000034
 8000350:	20000074 	.word	0x20000074
 8000354:	200000bc 	.word	0x200000bc
 8000358:	2000004c 	.word	0x2000004c
 800035c:	00008c02 	.word	0x00008c02
 8000360:	20000030 	.word	0x20000030
 8000364:	20000048 	.word	0x20000048
 8000368:	40000400 	.word	0x40000400
 800036c:	000022b8 	.word	0x000022b8
 8000370:	48001400 	.word	0x48001400
 8000374:	20000044 	.word	0x20000044

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b590      	push	{r4, r7, lr}
 800037a:	b093      	sub	sp, #76	; 0x4c
 800037c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037e:	2414      	movs	r4, #20
 8000380:	193b      	adds	r3, r7, r4
 8000382:	0018      	movs	r0, r3
 8000384:	2334      	movs	r3, #52	; 0x34
 8000386:	001a      	movs	r2, r3
 8000388:	2100      	movs	r1, #0
 800038a:	f004 f879 	bl	8004480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	0018      	movs	r0, r3
 8000392:	2310      	movs	r3, #16
 8000394:	001a      	movs	r2, r3
 8000396:	2100      	movs	r1, #0
 8000398:	f004 f872 	bl	8004480 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800039c:	0021      	movs	r1, r4
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2212      	movs	r2, #18
 80003a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2201      	movs	r2, #1
 80003a8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2201      	movs	r2, #1
 80003ae:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b0:	187b      	adds	r3, r7, r1
 80003b2:	2210      	movs	r2, #16
 80003b4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2210      	movs	r2, #16
 80003ba:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2202      	movs	r2, #2
 80003c0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2280      	movs	r2, #128	; 0x80
 80003c6:	0212      	lsls	r2, r2, #8
 80003c8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	2280      	movs	r2, #128	; 0x80
 80003ce:	0312      	lsls	r2, r2, #12
 80003d0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	2200      	movs	r2, #0
 80003d6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	0018      	movs	r0, r3
 80003dc:	f002 fd06 	bl	8002dec <HAL_RCC_OscConfig>
 80003e0:	1e03      	subs	r3, r0, #0
 80003e2:	d001      	beq.n	80003e8 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80003e4:	f000 fa24 	bl	8000830 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2207      	movs	r2, #7
 80003ec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2202      	movs	r2, #2
 80003f2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2200      	movs	r2, #0
 80003fe:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2101      	movs	r1, #1
 8000404:	0018      	movs	r0, r3
 8000406:	f003 f877 	bl	80034f8 <HAL_RCC_ClockConfig>
 800040a:	1e03      	subs	r3, r0, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800040e:	f000 fa0f 	bl	8000830 <Error_Handler>
  }
}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	b013      	add	sp, #76	; 0x4c
 8000418:	bd90      	pop	{r4, r7, pc}
	...

0800041c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	0018      	movs	r0, r3
 8000426:	230c      	movs	r3, #12
 8000428:	001a      	movs	r2, r3
 800042a:	2100      	movs	r1, #0
 800042c:	f004 f828 	bl	8004480 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000430:	4b53      	ldr	r3, [pc, #332]	; (8000580 <MX_ADC_Init+0x164>)
 8000432:	4a54      	ldr	r2, [pc, #336]	; (8000584 <MX_ADC_Init+0x168>)
 8000434:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000436:	4b52      	ldr	r3, [pc, #328]	; (8000580 <MX_ADC_Init+0x164>)
 8000438:	2200      	movs	r2, #0
 800043a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800043c:	4b50      	ldr	r3, [pc, #320]	; (8000580 <MX_ADC_Init+0x164>)
 800043e:	2200      	movs	r2, #0
 8000440:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000442:	4b4f      	ldr	r3, [pc, #316]	; (8000580 <MX_ADC_Init+0x164>)
 8000444:	2200      	movs	r2, #0
 8000446:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000448:	4b4d      	ldr	r3, [pc, #308]	; (8000580 <MX_ADC_Init+0x164>)
 800044a:	2201      	movs	r2, #1
 800044c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800044e:	4b4c      	ldr	r3, [pc, #304]	; (8000580 <MX_ADC_Init+0x164>)
 8000450:	2204      	movs	r2, #4
 8000452:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000454:	4b4a      	ldr	r3, [pc, #296]	; (8000580 <MX_ADC_Init+0x164>)
 8000456:	2200      	movs	r2, #0
 8000458:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800045a:	4b49      	ldr	r3, [pc, #292]	; (8000580 <MX_ADC_Init+0x164>)
 800045c:	2200      	movs	r2, #0
 800045e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000460:	4b47      	ldr	r3, [pc, #284]	; (8000580 <MX_ADC_Init+0x164>)
 8000462:	2201      	movs	r2, #1
 8000464:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000466:	4b46      	ldr	r3, [pc, #280]	; (8000580 <MX_ADC_Init+0x164>)
 8000468:	2200      	movs	r2, #0
 800046a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800046c:	4b44      	ldr	r3, [pc, #272]	; (8000580 <MX_ADC_Init+0x164>)
 800046e:	22c2      	movs	r2, #194	; 0xc2
 8000470:	32ff      	adds	r2, #255	; 0xff
 8000472:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000474:	4b42      	ldr	r3, [pc, #264]	; (8000580 <MX_ADC_Init+0x164>)
 8000476:	2200      	movs	r2, #0
 8000478:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800047a:	4b41      	ldr	r3, [pc, #260]	; (8000580 <MX_ADC_Init+0x164>)
 800047c:	2224      	movs	r2, #36	; 0x24
 800047e:	2101      	movs	r1, #1
 8000480:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000482:	4b3f      	ldr	r3, [pc, #252]	; (8000580 <MX_ADC_Init+0x164>)
 8000484:	2201      	movs	r2, #1
 8000486:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000488:	4b3d      	ldr	r3, [pc, #244]	; (8000580 <MX_ADC_Init+0x164>)
 800048a:	0018      	movs	r0, r3
 800048c:	f000 fc4e 	bl	8000d2c <HAL_ADC_Init>
 8000490:	1e03      	subs	r3, r0, #0
 8000492:	d001      	beq.n	8000498 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000494:	f000 f9cc 	bl	8000830 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2280      	movs	r2, #128	; 0x80
 80004a2:	0152      	lsls	r2, r2, #5
 80004a4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2201      	movs	r2, #1
 80004aa:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004ac:	1d3a      	adds	r2, r7, #4
 80004ae:	4b34      	ldr	r3, [pc, #208]	; (8000580 <MX_ADC_Init+0x164>)
 80004b0:	0011      	movs	r1, r2
 80004b2:	0018      	movs	r0, r3
 80004b4:	f000 fe82 	bl	80011bc <HAL_ADC_ConfigChannel>
 80004b8:	1e03      	subs	r3, r0, #0
 80004ba:	d001      	beq.n	80004c0 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80004bc:	f000 f9b8 	bl	8000830 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2201      	movs	r2, #1
 80004c4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004c6:	1d3a      	adds	r2, r7, #4
 80004c8:	4b2d      	ldr	r3, [pc, #180]	; (8000580 <MX_ADC_Init+0x164>)
 80004ca:	0011      	movs	r1, r2
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fe75 	bl	80011bc <HAL_ADC_ConfigChannel>
 80004d2:	1e03      	subs	r3, r0, #0
 80004d4:	d001      	beq.n	80004da <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80004d6:	f000 f9ab 	bl	8000830 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2202      	movs	r2, #2
 80004de:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004e0:	1d3a      	adds	r2, r7, #4
 80004e2:	4b27      	ldr	r3, [pc, #156]	; (8000580 <MX_ADC_Init+0x164>)
 80004e4:	0011      	movs	r1, r2
 80004e6:	0018      	movs	r0, r3
 80004e8:	f000 fe68 	bl	80011bc <HAL_ADC_ConfigChannel>
 80004ec:	1e03      	subs	r3, r0, #0
 80004ee:	d001      	beq.n	80004f4 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 80004f0:	f000 f99e 	bl	8000830 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2203      	movs	r2, #3
 80004f8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004fa:	1d3a      	adds	r2, r7, #4
 80004fc:	4b20      	ldr	r3, [pc, #128]	; (8000580 <MX_ADC_Init+0x164>)
 80004fe:	0011      	movs	r1, r2
 8000500:	0018      	movs	r0, r3
 8000502:	f000 fe5b 	bl	80011bc <HAL_ADC_ConfigChannel>
 8000506:	1e03      	subs	r3, r0, #0
 8000508:	d001      	beq.n	800050e <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 800050a:	f000 f991 	bl	8000830 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	2204      	movs	r2, #4
 8000512:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000514:	1d3a      	adds	r2, r7, #4
 8000516:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <MX_ADC_Init+0x164>)
 8000518:	0011      	movs	r1, r2
 800051a:	0018      	movs	r0, r3
 800051c:	f000 fe4e 	bl	80011bc <HAL_ADC_ConfigChannel>
 8000520:	1e03      	subs	r3, r0, #0
 8000522:	d001      	beq.n	8000528 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8000524:	f000 f984 	bl	8000830 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2205      	movs	r2, #5
 800052c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800052e:	1d3a      	adds	r2, r7, #4
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <MX_ADC_Init+0x164>)
 8000532:	0011      	movs	r1, r2
 8000534:	0018      	movs	r0, r3
 8000536:	f000 fe41 	bl	80011bc <HAL_ADC_ConfigChannel>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d001      	beq.n	8000542 <MX_ADC_Init+0x126>
  {
    Error_Handler();
 800053e:	f000 f977 	bl	8000830 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2206      	movs	r2, #6
 8000546:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000548:	1d3a      	adds	r2, r7, #4
 800054a:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <MX_ADC_Init+0x164>)
 800054c:	0011      	movs	r1, r2
 800054e:	0018      	movs	r0, r3
 8000550:	f000 fe34 	bl	80011bc <HAL_ADC_ConfigChannel>
 8000554:	1e03      	subs	r3, r0, #0
 8000556:	d001      	beq.n	800055c <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8000558:	f000 f96a 	bl	8000830 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2207      	movs	r2, #7
 8000560:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000562:	1d3a      	adds	r2, r7, #4
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <MX_ADC_Init+0x164>)
 8000566:	0011      	movs	r1, r2
 8000568:	0018      	movs	r0, r3
 800056a:	f000 fe27 	bl	80011bc <HAL_ADC_ConfigChannel>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 8000572:	f000 f95d 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	b004      	add	sp, #16
 800057c:	bd80      	pop	{r7, pc}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	20000134 	.word	0x20000134
 8000584:	40012400 	.word	0x40012400

08000588 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800058e:	4b2c      	ldr	r3, [pc, #176]	; (8000640 <MX_CAN_Init+0xb8>)
 8000590:	4a2c      	ldr	r2, [pc, #176]	; (8000644 <MX_CAN_Init+0xbc>)
 8000592:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000594:	4b2a      	ldr	r3, [pc, #168]	; (8000640 <MX_CAN_Init+0xb8>)
 8000596:	2202      	movs	r2, #2
 8000598:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_SILENT_LOOPBACK;
 800059a:	4b29      	ldr	r3, [pc, #164]	; (8000640 <MX_CAN_Init+0xb8>)
 800059c:	22c0      	movs	r2, #192	; 0xc0
 800059e:	0612      	lsls	r2, r2, #24
 80005a0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005a2:	4b27      	ldr	r3, [pc, #156]	; (8000640 <MX_CAN_Init+0xb8>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80005a8:	4b25      	ldr	r3, [pc, #148]	; (8000640 <MX_CAN_Init+0xb8>)
 80005aa:	22c0      	movs	r2, #192	; 0xc0
 80005ac:	0312      	lsls	r2, r2, #12
 80005ae:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005b0:	4b23      	ldr	r3, [pc, #140]	; (8000640 <MX_CAN_Init+0xb8>)
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	0352      	lsls	r2, r2, #13
 80005b6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <MX_CAN_Init+0xb8>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80005be:	4b20      	ldr	r3, [pc, #128]	; (8000640 <MX_CAN_Init+0xb8>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <MX_CAN_Init+0xb8>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80005ca:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <MX_CAN_Init+0xb8>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <MX_CAN_Init+0xb8>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <MX_CAN_Init+0xb8>)
 80005d8:	2201      	movs	r2, #1
 80005da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_CAN_Init+0xb8>)
 80005de:	0018      	movs	r0, r3
 80005e0:	f001 f948 	bl	8001874 <HAL_CAN_Init>
 80005e4:	1e03      	subs	r3, r0, #0
 80005e6:	d001      	beq.n	80005ec <MX_CAN_Init+0x64>
  {
    Error_Handler();
 80005e8:	f000 f922 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  sFilterConfig.FilterBank = 0;
 80005ec:	003b      	movs	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005f2:	003b      	movs	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005f8:	003b      	movs	r3, r7
 80005fa:	2201      	movs	r2, #1
 80005fc:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80005fe:	003b      	movs	r3, r7
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000604:	003b      	movs	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800060a:	003b      	movs	r3, r7
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000610:	003b      	movs	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000616:	003b      	movs	r3, r7
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800061c:	003b      	movs	r3, r7
 800061e:	2201      	movs	r2, #1
 8000620:	621a      	str	r2, [r3, #32]
  //sFilterConfig.SlaveStartFilterBank = 14;

  if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000622:	003a      	movs	r2, r7
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_CAN_Init+0xb8>)
 8000626:	0011      	movs	r1, r2
 8000628:	0018      	movs	r0, r3
 800062a:	f001 fa21 	bl	8001a70 <HAL_CAN_ConfigFilter>
 800062e:	1e03      	subs	r3, r0, #0
 8000630:	d001      	beq.n	8000636 <MX_CAN_Init+0xae>
  {
  Error_Handler();
 8000632:	f000 f8fd 	bl	8000830 <Error_Handler>
  }
  /* USER CODE END CAN_Init 2 */

}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	b00a      	add	sp, #40	; 0x28
 800063c:	bd80      	pop	{r7, pc}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	2000004c 	.word	0x2000004c
 8000644:	40006400 	.word	0x40006400

08000648 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08e      	sub	sp, #56	; 0x38
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800064e:	2328      	movs	r3, #40	; 0x28
 8000650:	18fb      	adds	r3, r7, r3
 8000652:	0018      	movs	r0, r3
 8000654:	2310      	movs	r3, #16
 8000656:	001a      	movs	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	f003 ff11 	bl	8004480 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065e:	2320      	movs	r3, #32
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	0018      	movs	r0, r3
 8000664:	2308      	movs	r3, #8
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f003 ff09 	bl	8004480 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	0018      	movs	r0, r3
 8000672:	231c      	movs	r3, #28
 8000674:	001a      	movs	r2, r3
 8000676:	2100      	movs	r1, #0
 8000678:	f003 ff02 	bl	8004480 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800067c:	4b2f      	ldr	r3, [pc, #188]	; (800073c <MX_TIM3_Init+0xf4>)
 800067e:	4a30      	ldr	r2, [pc, #192]	; (8000740 <MX_TIM3_Init+0xf8>)
 8000680:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000682:	4b2e      	ldr	r3, [pc, #184]	; (800073c <MX_TIM3_Init+0xf4>)
 8000684:	2200      	movs	r2, #0
 8000686:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000688:	4b2c      	ldr	r3, [pc, #176]	; (800073c <MX_TIM3_Init+0xf4>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800068e:	4b2b      	ldr	r3, [pc, #172]	; (800073c <MX_TIM3_Init+0xf4>)
 8000690:	4a2c      	ldr	r2, [pc, #176]	; (8000744 <MX_TIM3_Init+0xfc>)
 8000692:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000694:	4b29      	ldr	r3, [pc, #164]	; (800073c <MX_TIM3_Init+0xf4>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069a:	4b28      	ldr	r3, [pc, #160]	; (800073c <MX_TIM3_Init+0xf4>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006a0:	4b26      	ldr	r3, [pc, #152]	; (800073c <MX_TIM3_Init+0xf4>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f003 f882 	bl	80037ac <HAL_TIM_Base_Init>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80006ac:	f000 f8c0 	bl	8000830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b0:	2128      	movs	r1, #40	; 0x28
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2280      	movs	r2, #128	; 0x80
 80006b6:	0152      	lsls	r2, r2, #5
 80006b8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006ba:	187a      	adds	r2, r7, r1
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_TIM3_Init+0xf4>)
 80006be:	0011      	movs	r1, r2
 80006c0:	0018      	movs	r0, r3
 80006c2:	f003 fa83 	bl	8003bcc <HAL_TIM_ConfigClockSource>
 80006c6:	1e03      	subs	r3, r0, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80006ca:	f000 f8b1 	bl	8000830 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006ce:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_TIM3_Init+0xf4>)
 80006d0:	0018      	movs	r0, r3
 80006d2:	f003 f8bb 	bl	800384c <HAL_TIM_PWM_Init>
 80006d6:	1e03      	subs	r3, r0, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80006da:	f000 f8a9 	bl	8000830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006de:	2120      	movs	r1, #32
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006ec:	187a      	adds	r2, r7, r1
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_TIM3_Init+0xf4>)
 80006f0:	0011      	movs	r1, r2
 80006f2:	0018      	movs	r0, r3
 80006f4:	f003 fe48 	bl	8004388 <HAL_TIMEx_MasterConfigSynchronization>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80006fc:	f000 f898 	bl	8000830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2260      	movs	r2, #96	; 0x60
 8000704:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2200      	movs	r2, #0
 800070a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000718:	1d39      	adds	r1, r7, #4
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_TIM3_Init+0xf4>)
 800071c:	220c      	movs	r2, #12
 800071e:	0018      	movs	r0, r3
 8000720:	f003 f998 	bl	8003a54 <HAL_TIM_PWM_ConfigChannel>
 8000724:	1e03      	subs	r3, r0, #0
 8000726:	d001      	beq.n	800072c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000728:	f000 f882 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <MX_TIM3_Init+0xf4>)
 800072e:	0018      	movs	r0, r3
 8000730:	f000 f9bc 	bl	8000aac <HAL_TIM_MspPostInit>

}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b00e      	add	sp, #56	; 0x38
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000074 	.word	0x20000074
 8000740:	40000400 	.word	0x40000400
 8000744:	0000270f 	.word	0x0000270f

08000748 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_DMA_Init+0x38>)
 8000750:	695a      	ldr	r2, [r3, #20]
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_DMA_Init+0x38>)
 8000754:	2101      	movs	r1, #1
 8000756:	430a      	orrs	r2, r1
 8000758:	615a      	str	r2, [r3, #20]
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_DMA_Init+0x38>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	2201      	movs	r2, #1
 8000760:	4013      	ands	r3, r2
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	2100      	movs	r1, #0
 800076a:	2009      	movs	r0, #9
 800076c:	f001 ff9c 	bl	80026a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000770:	2009      	movs	r0, #9
 8000772:	f001 ffae 	bl	80026d2 <HAL_NVIC_EnableIRQ>

}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	b002      	add	sp, #8
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	40021000 	.word	0x40021000

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b089      	sub	sp, #36	; 0x24
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	240c      	movs	r4, #12
 800078c:	193b      	adds	r3, r7, r4
 800078e:	0018      	movs	r0, r3
 8000790:	2314      	movs	r3, #20
 8000792:	001a      	movs	r2, r3
 8000794:	2100      	movs	r1, #0
 8000796:	f003 fe73 	bl	8004480 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	4b23      	ldr	r3, [pc, #140]	; (8000828 <MX_GPIO_Init+0xa4>)
 800079c:	695a      	ldr	r2, [r3, #20]
 800079e:	4b22      	ldr	r3, [pc, #136]	; (8000828 <MX_GPIO_Init+0xa4>)
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	02c9      	lsls	r1, r1, #11
 80007a4:	430a      	orrs	r2, r1
 80007a6:	615a      	str	r2, [r3, #20]
 80007a8:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <MX_GPIO_Init+0xa4>)
 80007aa:	695a      	ldr	r2, [r3, #20]
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	02db      	lsls	r3, r3, #11
 80007b0:	4013      	ands	r3, r2
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b6:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_GPIO_Init+0xa4>)
 80007b8:	695a      	ldr	r2, [r3, #20]
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_GPIO_Init+0xa4>)
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	03c9      	lsls	r1, r1, #15
 80007c0:	430a      	orrs	r2, r1
 80007c2:	615a      	str	r2, [r3, #20]
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_GPIO_Init+0xa4>)
 80007c6:	695a      	ldr	r2, [r3, #20]
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	03db      	lsls	r3, r3, #15
 80007cc:	4013      	ands	r3, r2
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_GPIO_Init+0xa4>)
 80007d4:	695a      	ldr	r2, [r3, #20]
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_GPIO_Init+0xa4>)
 80007d8:	2180      	movs	r1, #128	; 0x80
 80007da:	0289      	lsls	r1, r1, #10
 80007dc:	430a      	orrs	r2, r1
 80007de:	615a      	str	r2, [r3, #20]
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_GPIO_Init+0xa4>)
 80007e2:	695a      	ldr	r2, [r3, #20]
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	029b      	lsls	r3, r3, #10
 80007e8:	4013      	ands	r3, r2
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_GPIO_Init+0xa8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	2101      	movs	r1, #1
 80007f4:	0018      	movs	r0, r3
 80007f6:	f002 fac1 	bl	8002d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007fa:	0021      	movs	r1, r4
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2201      	movs	r2, #1
 8000806:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000814:	187b      	adds	r3, r7, r1
 8000816:	4a05      	ldr	r2, [pc, #20]	; (800082c <MX_GPIO_Init+0xa8>)
 8000818:	0019      	movs	r1, r3
 800081a:	0010      	movs	r0, r2
 800081c:	f002 f946 	bl	8002aac <HAL_GPIO_Init>

}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	b009      	add	sp, #36	; 0x24
 8000826:	bd90      	pop	{r4, r7, pc}
 8000828:	40021000 	.word	0x40021000
 800082c:	48001400 	.word	0x48001400

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <HAL_MspInit+0x50>)
 8000844:	699a      	ldr	r2, [r3, #24]
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <HAL_MspInit+0x50>)
 8000848:	2101      	movs	r1, #1
 800084a:	430a      	orrs	r2, r1
 800084c:	619a      	str	r2, [r3, #24]
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <HAL_MspInit+0x50>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	2201      	movs	r2, #1
 8000854:	4013      	ands	r3, r2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <HAL_MspInit+0x50>)
 800085c:	69da      	ldr	r2, [r3, #28]
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <HAL_MspInit+0x50>)
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	0549      	lsls	r1, r1, #21
 8000864:	430a      	orrs	r2, r1
 8000866:	61da      	str	r2, [r3, #28]
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <HAL_MspInit+0x50>)
 800086a:	69da      	ldr	r2, [r3, #28]
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	055b      	lsls	r3, r3, #21
 8000870:	4013      	ands	r3, r2
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_MspInit+0x54>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_MspInit+0x54>)
 800087c:	2110      	movs	r1, #16
 800087e:	430a      	orrs	r2, r1
 8000880:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b002      	add	sp, #8
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	40021000 	.word	0x40021000
 8000890:	40010000 	.word	0x40010000

08000894 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b08b      	sub	sp, #44	; 0x2c
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	2414      	movs	r4, #20
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	0018      	movs	r0, r3
 80008a2:	2314      	movs	r3, #20
 80008a4:	001a      	movs	r2, r3
 80008a6:	2100      	movs	r1, #0
 80008a8:	f003 fdea 	bl	8004480 <memset>
  if(hadc->Instance==ADC1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a2d      	ldr	r2, [pc, #180]	; (8000968 <HAL_ADC_MspInit+0xd4>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d153      	bne.n	800095e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008b6:	4b2d      	ldr	r3, [pc, #180]	; (800096c <HAL_ADC_MspInit+0xd8>)
 80008b8:	699a      	ldr	r2, [r3, #24]
 80008ba:	4b2c      	ldr	r3, [pc, #176]	; (800096c <HAL_ADC_MspInit+0xd8>)
 80008bc:	2180      	movs	r1, #128	; 0x80
 80008be:	0089      	lsls	r1, r1, #2
 80008c0:	430a      	orrs	r2, r1
 80008c2:	619a      	str	r2, [r3, #24]
 80008c4:	4b29      	ldr	r3, [pc, #164]	; (800096c <HAL_ADC_MspInit+0xd8>)
 80008c6:	699a      	ldr	r2, [r3, #24]
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	4013      	ands	r3, r2
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b26      	ldr	r3, [pc, #152]	; (800096c <HAL_ADC_MspInit+0xd8>)
 80008d4:	695a      	ldr	r2, [r3, #20]
 80008d6:	4b25      	ldr	r3, [pc, #148]	; (800096c <HAL_ADC_MspInit+0xd8>)
 80008d8:	2180      	movs	r1, #128	; 0x80
 80008da:	0289      	lsls	r1, r1, #10
 80008dc:	430a      	orrs	r2, r1
 80008de:	615a      	str	r2, [r3, #20]
 80008e0:	4b22      	ldr	r3, [pc, #136]	; (800096c <HAL_ADC_MspInit+0xd8>)
 80008e2:	695a      	ldr	r2, [r3, #20]
 80008e4:	2380      	movs	r3, #128	; 0x80
 80008e6:	029b      	lsls	r3, r3, #10
 80008e8:	4013      	ands	r3, r2
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	22ff      	movs	r2, #255	; 0xff
 80008f2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	2203      	movs	r2, #3
 80008f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	193a      	adds	r2, r7, r4
 8000902:	2390      	movs	r3, #144	; 0x90
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	0011      	movs	r1, r2
 8000908:	0018      	movs	r0, r3
 800090a:	f002 f8cf 	bl	8002aac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <HAL_ADC_MspInit+0xdc>)
 8000910:	4a18      	ldr	r2, [pc, #96]	; (8000974 <HAL_ADC_MspInit+0xe0>)
 8000912:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000914:	4b16      	ldr	r3, [pc, #88]	; (8000970 <HAL_ADC_MspInit+0xdc>)
 8000916:	2200      	movs	r2, #0
 8000918:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_ADC_MspInit+0xdc>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <HAL_ADC_MspInit+0xdc>)
 8000922:	2280      	movs	r2, #128	; 0x80
 8000924:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_ADC_MspInit+0xdc>)
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	0052      	lsls	r2, r2, #1
 800092c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <HAL_ADC_MspInit+0xdc>)
 8000930:	2280      	movs	r2, #128	; 0x80
 8000932:	00d2      	lsls	r2, r2, #3
 8000934:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_ADC_MspInit+0xdc>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <HAL_ADC_MspInit+0xdc>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <HAL_ADC_MspInit+0xdc>)
 8000944:	0018      	movs	r0, r3
 8000946:	f001 fee1 	bl	800270c <HAL_DMA_Init>
 800094a:	1e03      	subs	r3, r0, #0
 800094c:	d001      	beq.n	8000952 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800094e:	f7ff ff6f 	bl	8000830 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a06      	ldr	r2, [pc, #24]	; (8000970 <HAL_ADC_MspInit+0xdc>)
 8000956:	631a      	str	r2, [r3, #48]	; 0x30
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <HAL_ADC_MspInit+0xdc>)
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b00b      	add	sp, #44	; 0x2c
 8000964:	bd90      	pop	{r4, r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	40012400 	.word	0x40012400
 800096c:	40021000 	.word	0x40021000
 8000970:	200000d4 	.word	0x200000d4
 8000974:	40020008 	.word	0x40020008

08000978 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b08b      	sub	sp, #44	; 0x2c
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	2414      	movs	r4, #20
 8000982:	193b      	adds	r3, r7, r4
 8000984:	0018      	movs	r0, r3
 8000986:	2314      	movs	r3, #20
 8000988:	001a      	movs	r2, r3
 800098a:	2100      	movs	r1, #0
 800098c:	f003 fd78 	bl	8004480 <memset>
  if(hcan->Instance==CAN)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a33      	ldr	r2, [pc, #204]	; (8000a64 <HAL_CAN_MspInit+0xec>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d15f      	bne.n	8000a5a <HAL_CAN_MspInit+0xe2>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800099a:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <HAL_CAN_MspInit+0xf0>)
 800099c:	69da      	ldr	r2, [r3, #28]
 800099e:	4b32      	ldr	r3, [pc, #200]	; (8000a68 <HAL_CAN_MspInit+0xf0>)
 80009a0:	2180      	movs	r1, #128	; 0x80
 80009a2:	0489      	lsls	r1, r1, #18
 80009a4:	430a      	orrs	r2, r1
 80009a6:	61da      	str	r2, [r3, #28]
 80009a8:	4b2f      	ldr	r3, [pc, #188]	; (8000a68 <HAL_CAN_MspInit+0xf0>)
 80009aa:	69da      	ldr	r2, [r3, #28]
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	049b      	lsls	r3, r3, #18
 80009b0:	4013      	ands	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	4b2c      	ldr	r3, [pc, #176]	; (8000a68 <HAL_CAN_MspInit+0xf0>)
 80009b8:	695a      	ldr	r2, [r3, #20]
 80009ba:	4b2b      	ldr	r3, [pc, #172]	; (8000a68 <HAL_CAN_MspInit+0xf0>)
 80009bc:	2180      	movs	r1, #128	; 0x80
 80009be:	02c9      	lsls	r1, r1, #11
 80009c0:	430a      	orrs	r2, r1
 80009c2:	615a      	str	r2, [r3, #20]
 80009c4:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <HAL_CAN_MspInit+0xf0>)
 80009c6:	695a      	ldr	r2, [r3, #20]
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	02db      	lsls	r3, r3, #11
 80009cc:	4013      	ands	r3, r2
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <HAL_CAN_MspInit+0xf0>)
 80009d4:	695a      	ldr	r2, [r3, #20]
 80009d6:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <HAL_CAN_MspInit+0xf0>)
 80009d8:	2180      	movs	r1, #128	; 0x80
 80009da:	0289      	lsls	r1, r1, #10
 80009dc:	430a      	orrs	r2, r1
 80009de:	615a      	str	r2, [r3, #20]
 80009e0:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <HAL_CAN_MspInit+0xf0>)
 80009e2:	695a      	ldr	r2, [r3, #20]
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	029b      	lsls	r3, r3, #10
 80009e8:	4013      	ands	r3, r2
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	2280      	movs	r2, #128	; 0x80
 80009f2:	0052      	lsls	r2, r2, #1
 80009f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	2202      	movs	r2, #2
 80009fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	193b      	adds	r3, r7, r4
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	2203      	movs	r2, #3
 8000a06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	4a16      	ldr	r2, [pc, #88]	; (8000a6c <HAL_CAN_MspInit+0xf4>)
 8000a12:	0019      	movs	r1, r3
 8000a14:	0010      	movs	r0, r2
 8000a16:	f002 f849 	bl	8002aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a1a:	0021      	movs	r1, r4
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	0152      	lsls	r2, r2, #5
 8000a22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2202      	movs	r2, #2
 8000a28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2203      	movs	r2, #3
 8000a34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2204      	movs	r2, #4
 8000a3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	187a      	adds	r2, r7, r1
 8000a3e:	2390      	movs	r3, #144	; 0x90
 8000a40:	05db      	lsls	r3, r3, #23
 8000a42:	0011      	movs	r1, r2
 8000a44:	0018      	movs	r0, r3
 8000a46:	f002 f831 	bl	8002aac <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	201e      	movs	r0, #30
 8000a50:	f001 fe2a 	bl	80026a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000a54:	201e      	movs	r0, #30
 8000a56:	f001 fe3c 	bl	80026d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b00b      	add	sp, #44	; 0x2c
 8000a60:	bd90      	pop	{r4, r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	40006400 	.word	0x40006400
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	48000400 	.word	0x48000400

08000a70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a09      	ldr	r2, [pc, #36]	; (8000aa4 <HAL_TIM_Base_MspInit+0x34>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d10b      	bne.n	8000a9a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <HAL_TIM_Base_MspInit+0x38>)
 8000a84:	69da      	ldr	r2, [r3, #28]
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_TIM_Base_MspInit+0x38>)
 8000a88:	2102      	movs	r1, #2
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	61da      	str	r2, [r3, #28]
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_TIM_Base_MspInit+0x38>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	2202      	movs	r2, #2
 8000a94:	4013      	ands	r3, r2
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b004      	add	sp, #16
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	40000400 	.word	0x40000400
 8000aa8:	40021000 	.word	0x40021000

08000aac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b089      	sub	sp, #36	; 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	240c      	movs	r4, #12
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	0018      	movs	r0, r3
 8000aba:	2314      	movs	r3, #20
 8000abc:	001a      	movs	r2, r3
 8000abe:	2100      	movs	r1, #0
 8000ac0:	f003 fcde 	bl	8004480 <memset>
  if(htim->Instance==TIM3)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a15      	ldr	r2, [pc, #84]	; (8000b20 <HAL_TIM_MspPostInit+0x74>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d123      	bne.n	8000b16 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_TIM_MspPostInit+0x78>)
 8000ad0:	695a      	ldr	r2, [r3, #20]
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <HAL_TIM_MspPostInit+0x78>)
 8000ad4:	2180      	movs	r1, #128	; 0x80
 8000ad6:	02c9      	lsls	r1, r1, #11
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	615a      	str	r2, [r3, #20]
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <HAL_TIM_MspPostInit+0x78>)
 8000ade:	695a      	ldr	r2, [r3, #20]
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	02db      	lsls	r3, r3, #11
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000aea:	0021      	movs	r1, r4
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2202      	movs	r2, #2
 8000af0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2202      	movs	r2, #2
 8000af6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2201      	movs	r2, #1
 8000b08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <HAL_TIM_MspPostInit+0x7c>)
 8000b0e:	0019      	movs	r1, r3
 8000b10:	0010      	movs	r0, r2
 8000b12:	f001 ffcb 	bl	8002aac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b009      	add	sp, #36	; 0x24
 8000b1c:	bd90      	pop	{r4, r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	40000400 	.word	0x40000400
 8000b24:	40021000 	.word	0x40021000
 8000b28:	48000400 	.word	0x48000400

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <NMI_Handler+0x4>

08000b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <HardFault_Handler+0x4>

08000b38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b50:	f000 f8ac 	bl	8000cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <DMA1_Channel1_IRQHandler+0x14>)
 8000b62:	0018      	movs	r0, r3
 8000b64:	f001 feb8 	bl	80028d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	200000d4 	.word	0x200000d4

08000b74 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <CEC_CAN_IRQHandler+0x14>)
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f001 fad4 	bl	8002128 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	2000004c 	.word	0x2000004c

08000b8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b98:	4813      	ldr	r0, [pc, #76]	; (8000be8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b9a:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000b9c:	4813      	ldr	r0, [pc, #76]	; (8000bec <LoopForever+0x6>)
    LDR R1, [R0]
 8000b9e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000ba0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000ba2:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <LoopForever+0xa>)
    CMP R1, R2
 8000ba4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000ba6:	d105      	bne.n	8000bb4 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000ba8:	4812      	ldr	r0, [pc, #72]	; (8000bf4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000baa:	4913      	ldr	r1, [pc, #76]	; (8000bf8 <LoopForever+0x12>)
    STR R1, [R0]
 8000bac:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000bae:	4813      	ldr	r0, [pc, #76]	; (8000bfc <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000bb0:	4913      	ldr	r1, [pc, #76]	; (8000c00 <LoopForever+0x1a>)
    STR R1, [R0]
 8000bb2:	6001      	str	r1, [r0, #0]

08000bb4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	4813      	ldr	r0, [pc, #76]	; (8000c04 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000bb6:	4914      	ldr	r1, [pc, #80]	; (8000c08 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <LoopForever+0x26>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a11      	ldr	r2, [pc, #68]	; (8000c10 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000bcc:	4c11      	ldr	r4, [pc, #68]	; (8000c14 <LoopForever+0x2e>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bda:	f7ff ffd7 	bl	8000b8c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000bde:	f003 fc2b 	bl	8004438 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000be2:	f7ff fb49 	bl	8000278 <main>

08000be6 <LoopForever>:

LoopForever:
    b LoopForever
 8000be6:	e7fe      	b.n	8000be6 <LoopForever>
  ldr   r0, =_estack
 8000be8:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000bec:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000bf0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000bf4:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000bf8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000bfc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000c00:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c0c:	080044e0 	.word	0x080044e0
  ldr r2, =_sbss
 8000c10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c14:	20000178 	.word	0x20000178

08000c18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC1_IRQHandler>
	...

08000c1c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <HAL_Init+0x24>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_Init+0x24>)
 8000c26:	2110      	movs	r1, #16
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f000 f809 	bl	8000c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c32:	f7ff fe03 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c36:	2300      	movs	r3, #0
}
 8000c38:	0018      	movs	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	40022000 	.word	0x40022000

08000c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_InitTick+0x5c>)
 8000c4e:	681c      	ldr	r4, [r3, #0]
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <HAL_InitTick+0x60>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	0019      	movs	r1, r3
 8000c56:	23fa      	movs	r3, #250	; 0xfa
 8000c58:	0098      	lsls	r0, r3, #2
 8000c5a:	f7ff fa55 	bl	8000108 <__udivsi3>
 8000c5e:	0003      	movs	r3, r0
 8000c60:	0019      	movs	r1, r3
 8000c62:	0020      	movs	r0, r4
 8000c64:	f7ff fa50 	bl	8000108 <__udivsi3>
 8000c68:	0003      	movs	r3, r0
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f001 fd41 	bl	80026f2 <HAL_SYSTICK_Config>
 8000c70:	1e03      	subs	r3, r0, #0
 8000c72:	d001      	beq.n	8000c78 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	e00f      	b.n	8000c98 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	d80b      	bhi.n	8000c96 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	2301      	movs	r3, #1
 8000c82:	425b      	negs	r3, r3
 8000c84:	2200      	movs	r2, #0
 8000c86:	0018      	movs	r0, r3
 8000c88:	f001 fd0e 	bl	80026a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_InitTick+0x64>)
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e000      	b.n	8000c98 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
}
 8000c98:	0018      	movs	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b003      	add	sp, #12
 8000c9e:	bd90      	pop	{r4, r7, pc}
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20000004 	.word	0x20000004

08000cac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <HAL_IncTick+0x1c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	001a      	movs	r2, r3
 8000cb6:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <HAL_IncTick+0x20>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	18d2      	adds	r2, r2, r3
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <HAL_IncTick+0x20>)
 8000cbe:	601a      	str	r2, [r3, #0]
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000174 	.word	0x20000174

08000cd0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b02      	ldr	r3, [pc, #8]	; (8000ce0 <HAL_GetTick+0x10>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	0018      	movs	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	20000174 	.word	0x20000174

08000ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cec:	f7ff fff0 	bl	8000cd0 <HAL_GetTick>
 8000cf0:	0003      	movs	r3, r0
 8000cf2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	d005      	beq.n	8000d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_Delay+0x44>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	001a      	movs	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	189b      	adds	r3, r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	f7ff ffe0 	bl	8000cd0 <HAL_GetTick>
 8000d10:	0002      	movs	r2, r0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d8f7      	bhi.n	8000d0c <HAL_Delay+0x28>
  {
  }
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b004      	add	sp, #16
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	20000008 	.word	0x20000008

08000d2c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d34:	230f      	movs	r3, #15
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d101      	bne.n	8000d4a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e125      	b.n	8000f96 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10a      	bne.n	8000d68 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2234      	movs	r2, #52	; 0x34
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	0018      	movs	r0, r3
 8000d64:	f7ff fd96 	bl	8000894 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d6c:	2210      	movs	r2, #16
 8000d6e:	4013      	ands	r3, r2
 8000d70:	d000      	beq.n	8000d74 <HAL_ADC_Init+0x48>
 8000d72:	e103      	b.n	8000f7c <HAL_ADC_Init+0x250>
 8000d74:	230f      	movs	r3, #15
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d000      	beq.n	8000d80 <HAL_ADC_Init+0x54>
 8000d7e:	e0fd      	b.n	8000f7c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	2204      	movs	r2, #4
 8000d88:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000d8a:	d000      	beq.n	8000d8e <HAL_ADC_Init+0x62>
 8000d8c:	e0f6      	b.n	8000f7c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d92:	4a83      	ldr	r2, [pc, #524]	; (8000fa0 <HAL_ADC_Init+0x274>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	2202      	movs	r2, #2
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	2203      	movs	r2, #3
 8000da6:	4013      	ands	r3, r2
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d112      	bne.n	8000dd2 <HAL_ADC_Init+0xa6>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2201      	movs	r2, #1
 8000db4:	4013      	ands	r3, r2
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d009      	beq.n	8000dce <HAL_ADC_Init+0xa2>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	021b      	lsls	r3, r3, #8
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	021b      	lsls	r3, r3, #8
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d101      	bne.n	8000dd2 <HAL_ADC_Init+0xa6>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e000      	b.n	8000dd4 <HAL_ADC_Init+0xa8>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d116      	bne.n	8000e06 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	2218      	movs	r2, #24
 8000de0:	4393      	bics	r3, r2
 8000de2:	0019      	movs	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	430a      	orrs	r2, r1
 8000dee:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	0899      	lsrs	r1, r3, #2
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	430a      	orrs	r2, r1
 8000e04:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4964      	ldr	r1, [pc, #400]	; (8000fa4 <HAL_ADC_Init+0x278>)
 8000e12:	400a      	ands	r2, r1
 8000e14:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	7e1b      	ldrb	r3, [r3, #24]
 8000e1a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7e5b      	ldrb	r3, [r3, #25]
 8000e20:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e22:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	7e9b      	ldrb	r3, [r3, #26]
 8000e28:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e2a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d002      	beq.n	8000e3a <HAL_ADC_Init+0x10e>
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	015b      	lsls	r3, r3, #5
 8000e38:	e000      	b.n	8000e3c <HAL_ADC_Init+0x110>
 8000e3a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e3c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e42:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d101      	bne.n	8000e50 <HAL_ADC_Init+0x124>
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	e000      	b.n	8000e52 <HAL_ADC_Init+0x126>
 8000e50:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000e52:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2124      	movs	r1, #36	; 0x24
 8000e58:	5c5b      	ldrb	r3, [r3, r1]
 8000e5a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e5c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	7edb      	ldrb	r3, [r3, #27]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d115      	bne.n	8000e98 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	7e9b      	ldrb	r3, [r3, #26]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d105      	bne.n	8000e80 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	2280      	movs	r2, #128	; 0x80
 8000e78:	0252      	lsls	r2, r2, #9
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	e00b      	b.n	8000e98 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e84:	2220      	movs	r2, #32
 8000e86:	431a      	orrs	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e90:	2201      	movs	r2, #1
 8000e92:	431a      	orrs	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	69da      	ldr	r2, [r3, #28]
 8000e9c:	23c2      	movs	r3, #194	; 0xc2
 8000e9e:	33ff      	adds	r3, #255	; 0xff
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d007      	beq.n	8000eb4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000eac:	4313      	orrs	r3, r2
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	68d9      	ldr	r1, [r3, #12]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	055b      	lsls	r3, r3, #21
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d01b      	beq.n	8000f08 <HAL_ADC_Init+0x1dc>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d017      	beq.n	8000f08 <HAL_ADC_Init+0x1dc>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d013      	beq.n	8000f08 <HAL_ADC_Init+0x1dc>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee4:	2b03      	cmp	r3, #3
 8000ee6:	d00f      	beq.n	8000f08 <HAL_ADC_Init+0x1dc>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	d00b      	beq.n	8000f08 <HAL_ADC_Init+0x1dc>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef4:	2b05      	cmp	r3, #5
 8000ef6:	d007      	beq.n	8000f08 <HAL_ADC_Init+0x1dc>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efc:	2b06      	cmp	r3, #6
 8000efe:	d003      	beq.n	8000f08 <HAL_ADC_Init+0x1dc>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f04:	2b07      	cmp	r3, #7
 8000f06:	d112      	bne.n	8000f2e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	695a      	ldr	r2, [r3, #20]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2107      	movs	r1, #7
 8000f14:	438a      	bics	r2, r1
 8000f16:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6959      	ldr	r1, [r3, #20]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f22:	2207      	movs	r2, #7
 8000f24:	401a      	ands	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	4a1c      	ldr	r2, [pc, #112]	; (8000fa8 <HAL_ADC_Init+0x27c>)
 8000f36:	4013      	ands	r3, r2
 8000f38:	68ba      	ldr	r2, [r7, #8]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d10b      	bne.n	8000f56 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f48:	2203      	movs	r2, #3
 8000f4a:	4393      	bics	r3, r2
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f54:	e01c      	b.n	8000f90 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f5a:	2212      	movs	r2, #18
 8000f5c:	4393      	bics	r3, r2
 8000f5e:	2210      	movs	r2, #16
 8000f60:	431a      	orrs	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000f72:	230f      	movs	r3, #15
 8000f74:	18fb      	adds	r3, r7, r3
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f7a:	e009      	b.n	8000f90 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f80:	2210      	movs	r2, #16
 8000f82:	431a      	orrs	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000f88:	230f      	movs	r3, #15
 8000f8a:	18fb      	adds	r3, r7, r3
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f90:	230f      	movs	r3, #15
 8000f92:	18fb      	adds	r3, r7, r3
 8000f94:	781b      	ldrb	r3, [r3, #0]
}
 8000f96:	0018      	movs	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b004      	add	sp, #16
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	fffffefd 	.word	0xfffffefd
 8000fa4:	fffe0219 	.word	0xfffe0219
 8000fa8:	833fffe7 	.word	0x833fffe7

08000fac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb8:	2317      	movs	r3, #23
 8000fba:	18fb      	adds	r3, r7, r3
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	4013      	ands	r3, r2
 8000fca:	d15e      	bne.n	800108a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2234      	movs	r2, #52	; 0x34
 8000fd0:	5c9b      	ldrb	r3, [r3, r2]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d101      	bne.n	8000fda <HAL_ADC_Start_DMA+0x2e>
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	e05e      	b.n	8001098 <HAL_ADC_Start_DMA+0xec>
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2234      	movs	r2, #52	; 0x34
 8000fde:	2101      	movs	r1, #1
 8000fe0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	7e5b      	ldrb	r3, [r3, #25]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d007      	beq.n	8000ffa <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000fea:	2317      	movs	r3, #23
 8000fec:	18fc      	adds	r4, r7, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f000 f9f1 	bl	80013d8 <ADC_Enable>
 8000ff6:	0003      	movs	r3, r0
 8000ff8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ffa:	2317      	movs	r3, #23
 8000ffc:	18fb      	adds	r3, r7, r3
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d146      	bne.n	8001092 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001008:	4a25      	ldr	r2, [pc, #148]	; (80010a0 <HAL_ADC_Start_DMA+0xf4>)
 800100a:	4013      	ands	r3, r2
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	0052      	lsls	r2, r2, #1
 8001010:	431a      	orrs	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2200      	movs	r2, #0
 800101a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2234      	movs	r2, #52	; 0x34
 8001020:	2100      	movs	r1, #0
 8001022:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	4a1e      	ldr	r2, [pc, #120]	; (80010a4 <HAL_ADC_Start_DMA+0xf8>)
 800102a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <HAL_ADC_Start_DMA+0xfc>)
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001038:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <HAL_ADC_Start_DMA+0x100>)
 800103a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	221c      	movs	r2, #28
 8001042:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2110      	movs	r1, #16
 8001050:	430a      	orrs	r2, r1
 8001052:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2101      	movs	r1, #1
 8001060:	430a      	orrs	r2, r1
 8001062:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	3340      	adds	r3, #64	; 0x40
 800106e:	0019      	movs	r1, r3
 8001070:	68ba      	ldr	r2, [r7, #8]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f001 fb92 	bl	800279c <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2104      	movs	r1, #4
 8001084:	430a      	orrs	r2, r1
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	e003      	b.n	8001092 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800108a:	2317      	movs	r3, #23
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	2202      	movs	r2, #2
 8001090:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001092:	2317      	movs	r3, #23
 8001094:	18fb      	adds	r3, r7, r3
 8001096:	781b      	ldrb	r3, [r3, #0]
}
 8001098:	0018      	movs	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	b007      	add	sp, #28
 800109e:	bd90      	pop	{r4, r7, pc}
 80010a0:	fffff0fe 	.word	0xfffff0fe
 80010a4:	08001631 	.word	0x08001631
 80010a8:	080016e5 	.word	0x080016e5
 80010ac:	08001703 	.word	0x08001703

080010b0 <HAL_ADC_Stop_DMA>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b8:	230f      	movs	r3, #15
 80010ba:	18fb      	adds	r3, r7, r3
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2234      	movs	r2, #52	; 0x34
 80010c4:	5c9b      	ldrb	r3, [r3, r2]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d101      	bne.n	80010ce <HAL_ADC_Stop_DMA+0x1e>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e05f      	b.n	800118e <HAL_ADC_Stop_DMA+0xde>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2234      	movs	r2, #52	; 0x34
 80010d2:	2101      	movs	r1, #1
 80010d4:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80010d6:	250f      	movs	r5, #15
 80010d8:	197c      	adds	r4, r7, r5
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	0018      	movs	r0, r3
 80010de:	f000 fa61 	bl	80015a4 <ADC_ConversionStop>
 80010e2:	0003      	movs	r3, r0
 80010e4:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80010e6:	0028      	movs	r0, r5
 80010e8:	183b      	adds	r3, r7, r0
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d147      	bne.n	8001180 <HAL_ADC_Stop_DMA+0xd0>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68da      	ldr	r2, [r3, #12]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2101      	movs	r1, #1
 80010fc:	438a      	bics	r2, r1
 80010fe:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	2221      	movs	r2, #33	; 0x21
 8001106:	5c9b      	ldrb	r3, [r3, r2]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d112      	bne.n	8001134 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	0005      	movs	r5, r0
 8001114:	183c      	adds	r4, r7, r0
 8001116:	0018      	movs	r0, r3
 8001118:	f001 fba6 	bl	8002868 <HAL_DMA_Abort>
 800111c:	0003      	movs	r3, r0
 800111e:	7023      	strb	r3, [r4, #0]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001120:	197b      	adds	r3, r7, r5
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d005      	beq.n	8001134 <HAL_ADC_Stop_DMA+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800112c:	2240      	movs	r2, #64	; 0x40
 800112e:	431a      	orrs	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2110      	movs	r1, #16
 8001140:	438a      	bics	r2, r1
 8001142:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
    /* in memory a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8001144:	220f      	movs	r2, #15
 8001146:	18bb      	adds	r3, r7, r2
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d107      	bne.n	800115e <HAL_ADC_Stop_DMA+0xae>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800114e:	18bc      	adds	r4, r7, r2
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	0018      	movs	r0, r3
 8001154:	f000 f9bc 	bl	80014d0 <ADC_Disable>
 8001158:	0003      	movs	r3, r0
 800115a:	7023      	strb	r3, [r4, #0]
 800115c:	e003      	b.n	8001166 <HAL_ADC_Stop_DMA+0xb6>
    }
    else
    {
      ADC_Disable(hadc);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	0018      	movs	r0, r3
 8001162:	f000 f9b5 	bl	80014d0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001166:	230f      	movs	r3, #15
 8001168:	18fb      	adds	r3, r7, r3
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d107      	bne.n	8001180 <HAL_ADC_Stop_DMA+0xd0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001174:	4a08      	ldr	r2, [pc, #32]	; (8001198 <HAL_ADC_Stop_DMA+0xe8>)
 8001176:	4013      	ands	r3, r2
 8001178:	2201      	movs	r2, #1
 800117a:	431a      	orrs	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2234      	movs	r2, #52	; 0x34
 8001184:	2100      	movs	r1, #0
 8001186:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001188:	230f      	movs	r3, #15
 800118a:	18fb      	adds	r3, r7, r3
 800118c:	781b      	ldrb	r3, [r3, #0]
}
 800118e:	0018      	movs	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	b004      	add	sp, #16
 8001194:	bdb0      	pop	{r4, r5, r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	fffffefe 	.word	0xfffffefe

0800119c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b002      	add	sp, #8
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80011b4:	46c0      	nop			; (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b002      	add	sp, #8
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c6:	230f      	movs	r3, #15
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	055b      	lsls	r3, r3, #21
 80011da:	429a      	cmp	r2, r3
 80011dc:	d011      	beq.n	8001202 <HAL_ADC_ConfigChannel+0x46>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d00d      	beq.n	8001202 <HAL_ADC_ConfigChannel+0x46>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d009      	beq.n	8001202 <HAL_ADC_ConfigChannel+0x46>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d005      	beq.n	8001202 <HAL_ADC_ConfigChannel+0x46>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	d001      	beq.n	8001202 <HAL_ADC_ConfigChannel+0x46>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2234      	movs	r2, #52	; 0x34
 8001206:	5c9b      	ldrb	r3, [r3, r2]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d101      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x54>
 800120c:	2302      	movs	r3, #2
 800120e:	e0d0      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x1f6>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2234      	movs	r2, #52	; 0x34
 8001214:	2101      	movs	r1, #1
 8001216:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2204      	movs	r2, #4
 8001220:	4013      	ands	r3, r2
 8001222:	d000      	beq.n	8001226 <HAL_ADC_ConfigChannel+0x6a>
 8001224:	e0b4      	b.n	8001390 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	4a64      	ldr	r2, [pc, #400]	; (80013bc <HAL_ADC_ConfigChannel+0x200>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d100      	bne.n	8001232 <HAL_ADC_ConfigChannel+0x76>
 8001230:	e082      	b.n	8001338 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2201      	movs	r2, #1
 800123e:	409a      	lsls	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	430a      	orrs	r2, r1
 8001246:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	055b      	lsls	r3, r3, #21
 8001250:	429a      	cmp	r2, r3
 8001252:	d037      	beq.n	80012c4 <HAL_ADC_ConfigChannel+0x108>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001258:	2b01      	cmp	r3, #1
 800125a:	d033      	beq.n	80012c4 <HAL_ADC_ConfigChannel+0x108>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001260:	2b02      	cmp	r3, #2
 8001262:	d02f      	beq.n	80012c4 <HAL_ADC_ConfigChannel+0x108>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001268:	2b03      	cmp	r3, #3
 800126a:	d02b      	beq.n	80012c4 <HAL_ADC_ConfigChannel+0x108>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001270:	2b04      	cmp	r3, #4
 8001272:	d027      	beq.n	80012c4 <HAL_ADC_ConfigChannel+0x108>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001278:	2b05      	cmp	r3, #5
 800127a:	d023      	beq.n	80012c4 <HAL_ADC_ConfigChannel+0x108>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001280:	2b06      	cmp	r3, #6
 8001282:	d01f      	beq.n	80012c4 <HAL_ADC_ConfigChannel+0x108>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001288:	2b07      	cmp	r3, #7
 800128a:	d01b      	beq.n	80012c4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	2107      	movs	r1, #7
 8001298:	400b      	ands	r3, r1
 800129a:	429a      	cmp	r2, r3
 800129c:	d012      	beq.n	80012c4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	695a      	ldr	r2, [r3, #20]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2107      	movs	r1, #7
 80012aa:	438a      	bics	r2, r1
 80012ac:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6959      	ldr	r1, [r3, #20]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	2207      	movs	r2, #7
 80012ba:	401a      	ands	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b10      	cmp	r3, #16
 80012ca:	d007      	beq.n	80012dc <HAL_ADC_ConfigChannel+0x120>
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b11      	cmp	r3, #17
 80012d2:	d003      	beq.n	80012dc <HAL_ADC_ConfigChannel+0x120>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b12      	cmp	r3, #18
 80012da:	d163      	bne.n	80013a4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80012dc:	4b38      	ldr	r3, [pc, #224]	; (80013c0 <HAL_ADC_ConfigChannel+0x204>)
 80012de:	6819      	ldr	r1, [r3, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b10      	cmp	r3, #16
 80012e6:	d009      	beq.n	80012fc <HAL_ADC_ConfigChannel+0x140>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b11      	cmp	r3, #17
 80012ee:	d102      	bne.n	80012f6 <HAL_ADC_ConfigChannel+0x13a>
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	03db      	lsls	r3, r3, #15
 80012f4:	e004      	b.n	8001300 <HAL_ADC_ConfigChannel+0x144>
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	045b      	lsls	r3, r3, #17
 80012fa:	e001      	b.n	8001300 <HAL_ADC_ConfigChannel+0x144>
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	041b      	lsls	r3, r3, #16
 8001300:	4a2f      	ldr	r2, [pc, #188]	; (80013c0 <HAL_ADC_ConfigChannel+0x204>)
 8001302:	430b      	orrs	r3, r1
 8001304:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b10      	cmp	r3, #16
 800130c:	d14a      	bne.n	80013a4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800130e:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <HAL_ADC_ConfigChannel+0x208>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	492d      	ldr	r1, [pc, #180]	; (80013c8 <HAL_ADC_ConfigChannel+0x20c>)
 8001314:	0018      	movs	r0, r3
 8001316:	f7fe fef7 	bl	8000108 <__udivsi3>
 800131a:	0003      	movs	r3, r0
 800131c:	001a      	movs	r2, r3
 800131e:	0013      	movs	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	189b      	adds	r3, r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001328:	e002      	b.n	8001330 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	3b01      	subs	r3, #1
 800132e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f9      	bne.n	800132a <HAL_ADC_ConfigChannel+0x16e>
 8001336:	e035      	b.n	80013a4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2101      	movs	r1, #1
 8001344:	4099      	lsls	r1, r3
 8001346:	000b      	movs	r3, r1
 8001348:	43d9      	mvns	r1, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	400a      	ands	r2, r1
 8001350:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b10      	cmp	r3, #16
 8001358:	d007      	beq.n	800136a <HAL_ADC_ConfigChannel+0x1ae>
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b11      	cmp	r3, #17
 8001360:	d003      	beq.n	800136a <HAL_ADC_ConfigChannel+0x1ae>
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b12      	cmp	r3, #18
 8001368:	d11c      	bne.n	80013a4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_ADC_ConfigChannel+0x204>)
 800136c:	6819      	ldr	r1, [r3, #0]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b10      	cmp	r3, #16
 8001374:	d007      	beq.n	8001386 <HAL_ADC_ConfigChannel+0x1ca>
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b11      	cmp	r3, #17
 800137c:	d101      	bne.n	8001382 <HAL_ADC_ConfigChannel+0x1c6>
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <HAL_ADC_ConfigChannel+0x210>)
 8001380:	e002      	b.n	8001388 <HAL_ADC_ConfigChannel+0x1cc>
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_ADC_ConfigChannel+0x214>)
 8001384:	e000      	b.n	8001388 <HAL_ADC_ConfigChannel+0x1cc>
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HAL_ADC_ConfigChannel+0x218>)
 8001388:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <HAL_ADC_ConfigChannel+0x204>)
 800138a:	400b      	ands	r3, r1
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	e009      	b.n	80013a4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001394:	2220      	movs	r2, #32
 8001396:	431a      	orrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800139c:	230f      	movs	r3, #15
 800139e:	18fb      	adds	r3, r7, r3
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2234      	movs	r2, #52	; 0x34
 80013a8:	2100      	movs	r1, #0
 80013aa:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80013ac:	230f      	movs	r3, #15
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	781b      	ldrb	r3, [r3, #0]
}
 80013b2:	0018      	movs	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b004      	add	sp, #16
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	00001001 	.word	0x00001001
 80013c0:	40012708 	.word	0x40012708
 80013c4:	20000000 	.word	0x20000000
 80013c8:	000f4240 	.word	0x000f4240
 80013cc:	ffbfffff 	.word	0xffbfffff
 80013d0:	feffffff 	.word	0xfeffffff
 80013d4:	ff7fffff 	.word	0xff7fffff

080013d8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2203      	movs	r2, #3
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d112      	bne.n	800141c <ADC_Enable+0x44>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2201      	movs	r2, #1
 80013fe:	4013      	ands	r3, r2
 8001400:	2b01      	cmp	r3, #1
 8001402:	d009      	beq.n	8001418 <ADC_Enable+0x40>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	401a      	ands	r2, r3
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	429a      	cmp	r2, r3
 8001416:	d101      	bne.n	800141c <ADC_Enable+0x44>
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <ADC_Enable+0x46>
 800141c:	2300      	movs	r3, #0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d14b      	bne.n	80014ba <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	4a26      	ldr	r2, [pc, #152]	; (80014c4 <ADC_Enable+0xec>)
 800142a:	4013      	ands	r3, r2
 800142c:	d00d      	beq.n	800144a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001432:	2210      	movs	r2, #16
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800143e:	2201      	movs	r2, #1
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e038      	b.n	80014bc <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2101      	movs	r1, #1
 8001456:	430a      	orrs	r2, r1
 8001458:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800145a:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <ADC_Enable+0xf0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	491b      	ldr	r1, [pc, #108]	; (80014cc <ADC_Enable+0xf4>)
 8001460:	0018      	movs	r0, r3
 8001462:	f7fe fe51 	bl	8000108 <__udivsi3>
 8001466:	0003      	movs	r3, r0
 8001468:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800146a:	e002      	b.n	8001472 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	3b01      	subs	r3, #1
 8001470:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f9      	bne.n	800146c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001478:	f7ff fc2a 	bl	8000cd0 <HAL_GetTick>
 800147c:	0003      	movs	r3, r0
 800147e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001480:	e014      	b.n	80014ac <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001482:	f7ff fc25 	bl	8000cd0 <HAL_GetTick>
 8001486:	0002      	movs	r2, r0
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d90d      	bls.n	80014ac <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001494:	2210      	movs	r2, #16
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a0:	2201      	movs	r2, #1
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e007      	b.n	80014bc <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2201      	movs	r2, #1
 80014b4:	4013      	ands	r3, r2
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d1e3      	bne.n	8001482 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	0018      	movs	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	b004      	add	sp, #16
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	80000017 	.word	0x80000017
 80014c8:	20000000 	.word	0x20000000
 80014cc:	000f4240 	.word	0x000f4240

080014d0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2203      	movs	r2, #3
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d112      	bne.n	8001510 <ADC_Disable+0x40>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2201      	movs	r2, #1
 80014f2:	4013      	ands	r3, r2
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d009      	beq.n	800150c <ADC_Disable+0x3c>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	401a      	ands	r2, r3
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	429a      	cmp	r2, r3
 800150a:	d101      	bne.n	8001510 <ADC_Disable+0x40>
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <ADC_Disable+0x42>
 8001510:	2300      	movs	r3, #0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d041      	beq.n	800159a <ADC_Disable+0xca>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2205      	movs	r2, #5
 800151e:	4013      	ands	r3, r2
 8001520:	2b01      	cmp	r3, #1
 8001522:	d110      	bne.n	8001546 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2102      	movs	r1, #2
 8001530:	430a      	orrs	r2, r1
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2203      	movs	r2, #3
 800153a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800153c:	f7ff fbc8 	bl	8000cd0 <HAL_GetTick>
 8001540:	0003      	movs	r3, r0
 8001542:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001544:	e022      	b.n	800158c <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154a:	2210      	movs	r2, #16
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001556:	2201      	movs	r2, #1
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e01c      	b.n	800159c <ADC_Disable+0xcc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001562:	f7ff fbb5 	bl	8000cd0 <HAL_GetTick>
 8001566:	0002      	movs	r2, r0
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d90d      	bls.n	800158c <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001574:	2210      	movs	r2, #16
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001580:	2201      	movs	r2, #1
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e007      	b.n	800159c <ADC_Disable+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2201      	movs	r2, #1
 8001594:	4013      	ands	r3, r2
 8001596:	2b01      	cmp	r3, #1
 8001598:	d0e3      	beq.n	8001562 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	0018      	movs	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	b004      	add	sp, #16
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2204      	movs	r2, #4
 80015b8:	4013      	ands	r3, r2
 80015ba:	d034      	beq.n	8001626 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2204      	movs	r2, #4
 80015c4:	4013      	ands	r3, r2
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d10d      	bne.n	80015e6 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2202      	movs	r2, #2
 80015d2:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80015d4:	d107      	bne.n	80015e6 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2110      	movs	r1, #16
 80015e2:	430a      	orrs	r2, r1
 80015e4:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015e6:	f7ff fb73 	bl	8000cd0 <HAL_GetTick>
 80015ea:	0003      	movs	r3, r0
 80015ec:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80015ee:	e014      	b.n	800161a <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80015f0:	f7ff fb6e 	bl	8000cd0 <HAL_GetTick>
 80015f4:	0002      	movs	r2, r0
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d90d      	bls.n	800161a <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001602:	2210      	movs	r2, #16
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800160e:	2201      	movs	r2, #1
 8001610:	431a      	orrs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e006      	b.n	8001628 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2204      	movs	r2, #4
 8001622:	4013      	ands	r3, r2
 8001624:	d1e4      	bne.n	80015f0 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	0018      	movs	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	b004      	add	sp, #16
 800162e:	bd80      	pop	{r7, pc}

08001630 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001642:	2250      	movs	r2, #80	; 0x50
 8001644:	4013      	ands	r3, r2
 8001646:	d140      	bne.n	80016ca <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164c:	2280      	movs	r2, #128	; 0x80
 800164e:	0092      	lsls	r2, r2, #2
 8001650:	431a      	orrs	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	23c0      	movs	r3, #192	; 0xc0
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	4013      	ands	r3, r2
 8001662:	d12d      	bne.n	80016c0 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001668:	2b00      	cmp	r3, #0
 800166a:	d129      	bne.n	80016c0 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2208      	movs	r2, #8
 8001674:	4013      	ands	r3, r2
 8001676:	2b08      	cmp	r3, #8
 8001678:	d122      	bne.n	80016c0 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2204      	movs	r2, #4
 8001682:	4013      	ands	r3, r2
 8001684:	d110      	bne.n	80016a8 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	210c      	movs	r1, #12
 8001692:	438a      	bics	r2, r1
 8001694:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169a:	4a11      	ldr	r2, [pc, #68]	; (80016e0 <ADC_DMAConvCplt+0xb0>)
 800169c:	4013      	ands	r3, r2
 800169e:	2201      	movs	r2, #1
 80016a0:	431a      	orrs	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	639a      	str	r2, [r3, #56]	; 0x38
 80016a6:	e00b      	b.n	80016c0 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ac:	2220      	movs	r2, #32
 80016ae:	431a      	orrs	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b8:	2201      	movs	r2, #1
 80016ba:	431a      	orrs	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	0018      	movs	r0, r3
 80016c4:	f7fe fdac 	bl	8000220 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80016c8:	e005      	b.n	80016d6 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	0010      	movs	r0, r2
 80016d4:	4798      	blx	r3
}
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	46bd      	mov	sp, r7
 80016da:	b004      	add	sp, #16
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	fffffefe 	.word	0xfffffefe

080016e4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	0018      	movs	r0, r3
 80016f6:	f7ff fd51 	bl	800119c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b004      	add	sp, #16
 8001700:	bd80      	pop	{r7, pc}

08001702 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b084      	sub	sp, #16
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001714:	2240      	movs	r2, #64	; 0x40
 8001716:	431a      	orrs	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001720:	2204      	movs	r2, #4
 8001722:	431a      	orrs	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	0018      	movs	r0, r3
 800172c:	f7ff fd3e 	bl	80011ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001730:	46c0      	nop			; (mov r8, r8)
 8001732:	46bd      	mov	sp, r7
 8001734:	b004      	add	sp, #16
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001740:	2317      	movs	r3, #23
 8001742:	18fb      	adds	r3, r7, r3
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2234      	movs	r2, #52	; 0x34
 8001754:	5c9b      	ldrb	r3, [r3, r2]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d101      	bne.n	800175e <HAL_ADCEx_Calibration_Start+0x26>
 800175a:	2302      	movs	r3, #2
 800175c:	e084      	b.n	8001868 <HAL_ADCEx_Calibration_Start+0x130>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2234      	movs	r2, #52	; 0x34
 8001762:	2101      	movs	r1, #1
 8001764:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2203      	movs	r2, #3
 800176e:	4013      	ands	r3, r2
 8001770:	2b01      	cmp	r3, #1
 8001772:	d112      	bne.n	800179a <HAL_ADCEx_Calibration_Start+0x62>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2201      	movs	r2, #1
 800177c:	4013      	ands	r3, r2
 800177e:	2b01      	cmp	r3, #1
 8001780:	d009      	beq.n	8001796 <HAL_ADCEx_Calibration_Start+0x5e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	401a      	ands	r2, r3
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	429a      	cmp	r2, r3
 8001794:	d101      	bne.n	800179a <HAL_ADCEx_Calibration_Start+0x62>
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <HAL_ADCEx_Calibration_Start+0x64>
 800179a:	2300      	movs	r3, #0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d152      	bne.n	8001846 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a4:	4a32      	ldr	r2, [pc, #200]	; (8001870 <HAL_ADCEx_Calibration_Start+0x138>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	2202      	movs	r2, #2
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2203      	movs	r2, #3
 80017b8:	4013      	ands	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2103      	movs	r1, #3
 80017c8:	438a      	bics	r2, r1
 80017ca:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	0609      	lsls	r1, r1, #24
 80017da:	430a      	orrs	r2, r1
 80017dc:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80017de:	f7ff fa77 	bl	8000cd0 <HAL_GetTick>
 80017e2:	0003      	movs	r3, r0
 80017e4:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80017e6:	e014      	b.n	8001812 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80017e8:	f7ff fa72 	bl	8000cd0 <HAL_GetTick>
 80017ec:	0002      	movs	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d90d      	bls.n	8001812 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fa:	2212      	movs	r2, #18
 80017fc:	4393      	bics	r3, r2
 80017fe:	2210      	movs	r2, #16
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2234      	movs	r2, #52	; 0x34
 800180a:	2100      	movs	r1, #0
 800180c:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e02a      	b.n	8001868 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	0fdb      	lsrs	r3, r3, #31
 800181a:	07da      	lsls	r2, r3, #31
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	061b      	lsls	r3, r3, #24
 8001820:	429a      	cmp	r2, r3
 8001822:	d0e1      	beq.n	80017e8 <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68d9      	ldr	r1, [r3, #12]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	430a      	orrs	r2, r1
 8001832:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001838:	2203      	movs	r2, #3
 800183a:	4393      	bics	r3, r2
 800183c:	2201      	movs	r2, #1
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	639a      	str	r2, [r3, #56]	; 0x38
 8001844:	e009      	b.n	800185a <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184a:	2220      	movs	r2, #32
 800184c:	431a      	orrs	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001852:	2317      	movs	r3, #23
 8001854:	18fb      	adds	r3, r7, r3
 8001856:	2201      	movs	r2, #1
 8001858:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2234      	movs	r2, #52	; 0x34
 800185e:	2100      	movs	r1, #0
 8001860:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001862:	2317      	movs	r3, #23
 8001864:	18fb      	adds	r3, r7, r3
 8001866:	781b      	ldrb	r3, [r3, #0]
}
 8001868:	0018      	movs	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	b006      	add	sp, #24
 800186e:	bd80      	pop	{r7, pc}
 8001870:	fffffefd 	.word	0xfffffefd

08001874 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e0f0      	b.n	8001a68 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2220      	movs	r2, #32
 800188a:	5c9b      	ldrb	r3, [r3, r2]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d103      	bne.n	800189a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	0018      	movs	r0, r3
 8001896:	f7ff f86f 	bl	8000978 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2102      	movs	r1, #2
 80018a6:	438a      	bics	r2, r1
 80018a8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018aa:	f7ff fa11 	bl	8000cd0 <HAL_GetTick>
 80018ae:	0003      	movs	r3, r0
 80018b0:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018b2:	e013      	b.n	80018dc <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018b4:	f7ff fa0c 	bl	8000cd0 <HAL_GetTick>
 80018b8:	0002      	movs	r2, r0
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b0a      	cmp	r3, #10
 80018c0:	d90c      	bls.n	80018dc <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	2280      	movs	r2, #128	; 0x80
 80018c8:	0292      	lsls	r2, r2, #10
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2220      	movs	r2, #32
 80018d4:	2105      	movs	r1, #5
 80018d6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0c5      	b.n	8001a68 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2202      	movs	r2, #2
 80018e4:	4013      	ands	r3, r2
 80018e6:	d1e5      	bne.n	80018b4 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2101      	movs	r1, #1
 80018f4:	430a      	orrs	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018f8:	f7ff f9ea 	bl	8000cd0 <HAL_GetTick>
 80018fc:	0003      	movs	r3, r0
 80018fe:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001900:	e013      	b.n	800192a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001902:	f7ff f9e5 	bl	8000cd0 <HAL_GetTick>
 8001906:	0002      	movs	r2, r0
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b0a      	cmp	r3, #10
 800190e:	d90c      	bls.n	800192a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	2280      	movs	r2, #128	; 0x80
 8001916:	0292      	lsls	r2, r2, #10
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2220      	movs	r2, #32
 8001922:	2105      	movs	r1, #5
 8001924:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e09e      	b.n	8001a68 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	4013      	ands	r3, r2
 8001934:	d0e5      	beq.n	8001902 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7e1b      	ldrb	r3, [r3, #24]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d108      	bne.n	8001950 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	430a      	orrs	r2, r1
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	e007      	b.n	8001960 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2180      	movs	r1, #128	; 0x80
 800195c:	438a      	bics	r2, r1
 800195e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	7e5b      	ldrb	r3, [r3, #25]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d108      	bne.n	800197a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2140      	movs	r1, #64	; 0x40
 8001974:	430a      	orrs	r2, r1
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	e007      	b.n	800198a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2140      	movs	r1, #64	; 0x40
 8001986:	438a      	bics	r2, r1
 8001988:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7e9b      	ldrb	r3, [r3, #26]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d108      	bne.n	80019a4 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2120      	movs	r1, #32
 800199e:	430a      	orrs	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	e007      	b.n	80019b4 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2120      	movs	r1, #32
 80019b0:	438a      	bics	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	7edb      	ldrb	r3, [r3, #27]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d108      	bne.n	80019ce <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2110      	movs	r1, #16
 80019c8:	438a      	bics	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	e007      	b.n	80019de <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2110      	movs	r1, #16
 80019da:	430a      	orrs	r2, r1
 80019dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	7f1b      	ldrb	r3, [r3, #28]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d108      	bne.n	80019f8 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2108      	movs	r1, #8
 80019f2:	430a      	orrs	r2, r1
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	e007      	b.n	8001a08 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2108      	movs	r1, #8
 8001a04:	438a      	bics	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7f5b      	ldrb	r3, [r3, #29]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d108      	bne.n	8001a22 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2104      	movs	r1, #4
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	e007      	b.n	8001a32 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2104      	movs	r1, #4
 8001a2e:	438a      	bics	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	431a      	orrs	r2, r3
 8001a48:	0011      	movs	r1, r2
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	1e5a      	subs	r2, r3, #1
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2220      	movs	r2, #32
 8001a62:	2101      	movs	r1, #1
 8001a64:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	0018      	movs	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b004      	add	sp, #16
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a80:	2013      	movs	r0, #19
 8001a82:	183b      	adds	r3, r7, r0
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	2120      	movs	r1, #32
 8001a88:	5c52      	ldrb	r2, [r2, r1]
 8001a8a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	18bb      	adds	r3, r7, r2
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d004      	beq.n	8001aa0 <HAL_CAN_ConfigFilter+0x30>
 8001a96:	18bb      	adds	r3, r7, r2
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d000      	beq.n	8001aa0 <HAL_CAN_ConfigFilter+0x30>
 8001a9e:	e0cd      	b.n	8001c3c <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	58d3      	ldr	r3, [r2, r3]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	0011      	movs	r1, r2
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	221f      	movs	r2, #31
 8001abc:	4013      	ands	r3, r2
 8001abe:	2201      	movs	r2, #1
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	0013      	movs	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	2387      	movs	r3, #135	; 0x87
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	58d3      	ldr	r3, [r2, r3]
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	43d2      	mvns	r2, r2
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	0011      	movs	r1, r2
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	2387      	movs	r3, #135	; 0x87
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d129      	bne.n	8001b3a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	2383      	movs	r3, #131	; 0x83
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	58d3      	ldr	r3, [r2, r3]
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	43d2      	mvns	r2, r2
 8001af2:	401a      	ands	r2, r3
 8001af4:	0011      	movs	r1, r2
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	2383      	movs	r3, #131	; 0x83
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	041b      	lsls	r3, r3, #16
 8001b0a:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b10:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	3248      	adds	r2, #72	; 0x48
 8001b16:	00d2      	lsls	r2, r2, #3
 8001b18:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	041b      	lsls	r3, r3, #16
 8001b26:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b2c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b2e:	6979      	ldr	r1, [r7, #20]
 8001b30:	3348      	adds	r3, #72	; 0x48
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	18cb      	adds	r3, r1, r3
 8001b36:	3304      	adds	r3, #4
 8001b38:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d128      	bne.n	8001b94 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	2383      	movs	r3, #131	; 0x83
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	58d2      	ldr	r2, [r2, r3]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	0011      	movs	r1, r2
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	2383      	movs	r3, #131	; 0x83
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	041b      	lsls	r3, r3, #16
 8001b64:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b6a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	3248      	adds	r2, #72	; 0x48
 8001b70:	00d2      	lsls	r2, r2, #3
 8001b72:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	041b      	lsls	r3, r3, #16
 8001b80:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b86:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b88:	6979      	ldr	r1, [r7, #20]
 8001b8a:	3348      	adds	r3, #72	; 0x48
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	18cb      	adds	r3, r1, r3
 8001b90:	3304      	adds	r3, #4
 8001b92:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10c      	bne.n	8001bb6 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	2381      	movs	r3, #129	; 0x81
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	58d3      	ldr	r3, [r2, r3]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	43d2      	mvns	r2, r2
 8001ba8:	401a      	ands	r2, r3
 8001baa:	0011      	movs	r1, r2
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	2381      	movs	r3, #129	; 0x81
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	50d1      	str	r1, [r2, r3]
 8001bb4:	e00a      	b.n	8001bcc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	2381      	movs	r3, #129	; 0x81
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	58d2      	ldr	r2, [r2, r3]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	0011      	movs	r1, r2
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	2381      	movs	r3, #129	; 0x81
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10c      	bne.n	8001bee <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	2385      	movs	r3, #133	; 0x85
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	58d3      	ldr	r3, [r2, r3]
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	43d2      	mvns	r2, r2
 8001be0:	401a      	ands	r2, r3
 8001be2:	0011      	movs	r1, r2
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	2385      	movs	r3, #133	; 0x85
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	50d1      	str	r1, [r2, r3]
 8001bec:	e00a      	b.n	8001c04 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	2385      	movs	r3, #133	; 0x85
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	58d2      	ldr	r2, [r2, r3]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	0011      	movs	r1, r2
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	2385      	movs	r3, #133	; 0x85
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d10a      	bne.n	8001c22 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	2387      	movs	r3, #135	; 0x87
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	58d2      	ldr	r2, [r2, r3]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	0011      	movs	r1, r2
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	2387      	movs	r3, #135	; 0x87
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	58d3      	ldr	r3, [r2, r3]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4393      	bics	r3, r2
 8001c2e:	0019      	movs	r1, r3
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	e007      	b.n	8001c4c <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	2280      	movs	r2, #128	; 0x80
 8001c42:	02d2      	lsls	r2, r2, #11
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
  }
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b006      	add	sp, #24
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2220      	movs	r2, #32
 8001c60:	5c9b      	ldrb	r3, [r3, r2]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d12f      	bne.n	8001cc8 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	2102      	movs	r1, #2
 8001c6e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	438a      	bics	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c80:	f7ff f826 	bl	8000cd0 <HAL_GetTick>
 8001c84:	0003      	movs	r3, r0
 8001c86:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c88:	e013      	b.n	8001cb2 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c8a:	f7ff f821 	bl	8000cd0 <HAL_GetTick>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b0a      	cmp	r3, #10
 8001c96:	d90c      	bls.n	8001cb2 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	2280      	movs	r2, #128	; 0x80
 8001c9e:	0292      	lsls	r2, r2, #10
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	2105      	movs	r1, #5
 8001cac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e012      	b.n	8001cd8 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d1e5      	bne.n	8001c8a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	e007      	b.n	8001cd8 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	2280      	movs	r2, #128	; 0x80
 8001cce:	0312      	lsls	r2, r2, #12
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
  }
}
 8001cd8:	0018      	movs	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b004      	add	sp, #16
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cee:	201f      	movs	r0, #31
 8001cf0:	183b      	adds	r3, r7, r0
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	2120      	movs	r1, #32
 8001cf6:	5c52      	ldrb	r2, [r2, r1]
 8001cf8:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d02:	183b      	adds	r3, r7, r0
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d004      	beq.n	8001d14 <HAL_CAN_AddTxMessage+0x34>
 8001d0a:	183b      	adds	r3, r7, r0
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d000      	beq.n	8001d14 <HAL_CAN_AddTxMessage+0x34>
 8001d12:	e0b7      	b.n	8001e84 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	04db      	lsls	r3, r3, #19
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d10a      	bne.n	8001d34 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	051b      	lsls	r3, r3, #20
 8001d24:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d26:	d105      	bne.n	8001d34 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	055b      	lsls	r3, r3, #21
 8001d2e:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d30:	d100      	bne.n	8001d34 <HAL_CAN_AddTxMessage+0x54>
 8001d32:	e09e      	b.n	8001e72 <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	0e1b      	lsrs	r3, r3, #24
 8001d38:	2203      	movs	r2, #3
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d908      	bls.n	8001d56 <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	2280      	movs	r2, #128	; 0x80
 8001d4a:	0412      	lsls	r2, r2, #16
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e09e      	b.n	8001e94 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d56:	2201      	movs	r2, #1
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10c      	bne.n	8001d82 <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4311      	orrs	r1, r2
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	3218      	adds	r2, #24
 8001d7c:	0112      	lsls	r2, r2, #4
 8001d7e:	50d1      	str	r1, [r2, r3]
 8001d80:	e00f      	b.n	8001da2 <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8001d98:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	3218      	adds	r2, #24
 8001d9e:	0112      	lsls	r2, r2, #4
 8001da0:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6819      	ldr	r1, [r3, #0]
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	691a      	ldr	r2, [r3, #16]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	3318      	adds	r3, #24
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	18cb      	adds	r3, r1, r3
 8001db2:	3304      	adds	r3, #4
 8001db4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	7d1b      	ldrb	r3, [r3, #20]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d112      	bne.n	8001de4 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	3318      	adds	r3, #24
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	18d3      	adds	r3, r2, r3
 8001dca:	3304      	adds	r3, #4
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6819      	ldr	r1, [r3, #0]
 8001dd2:	2380      	movs	r3, #128	; 0x80
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	3318      	adds	r3, #24
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	18cb      	adds	r3, r1, r3
 8001de0:	3304      	adds	r3, #4
 8001de2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3307      	adds	r3, #7
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	061a      	lsls	r2, r3, #24
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3306      	adds	r3, #6
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	041b      	lsls	r3, r3, #16
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3305      	adds	r3, #5
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3304      	adds	r3, #4
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	0019      	movs	r1, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	6979      	ldr	r1, [r7, #20]
 8001e10:	23c6      	movs	r3, #198	; 0xc6
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	0109      	lsls	r1, r1, #4
 8001e16:	1841      	adds	r1, r0, r1
 8001e18:	18cb      	adds	r3, r1, r3
 8001e1a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3303      	adds	r3, #3
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	061a      	lsls	r2, r3, #24
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3302      	adds	r3, #2
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	041b      	lsls	r3, r3, #16
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3301      	adds	r3, #1
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	021b      	lsls	r3, r3, #8
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	0019      	movs	r1, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	6979      	ldr	r1, [r7, #20]
 8001e46:	23c4      	movs	r3, #196	; 0xc4
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	0109      	lsls	r1, r1, #4
 8001e4c:	1841      	adds	r1, r0, r1
 8001e4e:	18cb      	adds	r3, r1, r3
 8001e50:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	3218      	adds	r2, #24
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	58d2      	ldr	r2, [r2, r3]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2101      	movs	r1, #1
 8001e64:	4311      	orrs	r1, r2
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	3218      	adds	r2, #24
 8001e6a:	0112      	lsls	r2, r2, #4
 8001e6c:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e010      	b.n	8001e94 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	2280      	movs	r2, #128	; 0x80
 8001e78:	0392      	lsls	r2, r2, #14
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e007      	b.n	8001e94 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	02d2      	lsls	r2, r2, #11
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
  }
}
 8001e94:	0018      	movs	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b008      	add	sp, #32
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eaa:	2017      	movs	r0, #23
 8001eac:	183b      	adds	r3, r7, r0
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	2120      	movs	r1, #32
 8001eb2:	5c52      	ldrb	r2, [r2, r1]
 8001eb4:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001eb6:	0002      	movs	r2, r0
 8001eb8:	18bb      	adds	r3, r7, r2
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d004      	beq.n	8001eca <HAL_CAN_GetRxMessage+0x2e>
 8001ec0:	18bb      	adds	r3, r7, r2
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d000      	beq.n	8001eca <HAL_CAN_GetRxMessage+0x2e>
 8001ec8:	e0f8      	b.n	80020bc <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10e      	bne.n	8001eee <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d117      	bne.n	8001f0c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	2280      	movs	r2, #128	; 0x80
 8001ee2:	0392      	lsls	r2, r2, #14
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e0ee      	b.n	80020cc <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d108      	bne.n	8001f0c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	2280      	movs	r2, #128	; 0x80
 8001f00:	0392      	lsls	r2, r2, #14
 8001f02:	431a      	orrs	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0df      	b.n	80020cc <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	321b      	adds	r2, #27
 8001f14:	0112      	lsls	r2, r2, #4
 8001f16:	58d3      	ldr	r3, [r2, r3]
 8001f18:	2204      	movs	r2, #4
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10b      	bne.n	8001f40 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	321b      	adds	r2, #27
 8001f30:	0112      	lsls	r2, r2, #4
 8001f32:	58d3      	ldr	r3, [r2, r3]
 8001f34:	0d5b      	lsrs	r3, r3, #21
 8001f36:	055b      	lsls	r3, r3, #21
 8001f38:	0d5a      	lsrs	r2, r3, #21
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	e00a      	b.n	8001f56 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	321b      	adds	r2, #27
 8001f48:	0112      	lsls	r2, r2, #4
 8001f4a:	58d3      	ldr	r3, [r2, r3]
 8001f4c:	08db      	lsrs	r3, r3, #3
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	08da      	lsrs	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	321b      	adds	r2, #27
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	58d3      	ldr	r3, [r2, r3]
 8001f62:	2202      	movs	r2, #2
 8001f64:	401a      	ands	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	331b      	adds	r3, #27
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	18d3      	adds	r3, r2, r3
 8001f76:	3304      	adds	r3, #4
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	220f      	movs	r2, #15
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	331b      	adds	r3, #27
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	18d3      	adds	r3, r2, r3
 8001f8e:	3304      	adds	r3, #4
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	0a1b      	lsrs	r3, r3, #8
 8001f94:	22ff      	movs	r2, #255	; 0xff
 8001f96:	401a      	ands	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	331b      	adds	r3, #27
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	18d3      	adds	r3, r2, r3
 8001fa8:	3304      	adds	r3, #4
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	0c1b      	lsrs	r3, r3, #16
 8001fae:	041b      	lsls	r3, r3, #16
 8001fb0:	0c1a      	lsrs	r2, r3, #16
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6819      	ldr	r1, [r3, #0]
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	23dc      	movs	r3, #220	; 0xdc
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	0112      	lsls	r2, r2, #4
 8001fc2:	188a      	adds	r2, r1, r2
 8001fc4:	18d3      	adds	r3, r2, r3
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6819      	ldr	r1, [r3, #0]
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	23dc      	movs	r3, #220	; 0xdc
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	0112      	lsls	r2, r2, #4
 8001fda:	188a      	adds	r2, r1, r2
 8001fdc:	18d3      	adds	r3, r2, r3
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	0a1a      	lsrs	r2, r3, #8
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6819      	ldr	r1, [r3, #0]
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	23dc      	movs	r3, #220	; 0xdc
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	0112      	lsls	r2, r2, #4
 8001ff6:	188a      	adds	r2, r1, r2
 8001ff8:	18d3      	adds	r3, r2, r3
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0c1a      	lsrs	r2, r3, #16
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	3302      	adds	r3, #2
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6819      	ldr	r1, [r3, #0]
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	23dc      	movs	r3, #220	; 0xdc
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	0112      	lsls	r2, r2, #4
 8002012:	188a      	adds	r2, r1, r2
 8002014:	18d3      	adds	r3, r2, r3
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0e1a      	lsrs	r2, r3, #24
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	3303      	adds	r3, #3
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6819      	ldr	r1, [r3, #0]
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	23de      	movs	r3, #222	; 0xde
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	0112      	lsls	r2, r2, #4
 800202e:	188a      	adds	r2, r1, r2
 8002030:	18d3      	adds	r3, r2, r3
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	3304      	adds	r3, #4
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6819      	ldr	r1, [r3, #0]
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	23de      	movs	r3, #222	; 0xde
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	188a      	adds	r2, r1, r2
 800204a:	18d3      	adds	r3, r2, r3
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	0a1a      	lsrs	r2, r3, #8
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	3305      	adds	r3, #5
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6819      	ldr	r1, [r3, #0]
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	23de      	movs	r3, #222	; 0xde
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	0112      	lsls	r2, r2, #4
 8002064:	188a      	adds	r2, r1, r2
 8002066:	18d3      	adds	r3, r2, r3
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	0c1a      	lsrs	r2, r3, #16
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	3306      	adds	r3, #6
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6819      	ldr	r1, [r3, #0]
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	23de      	movs	r3, #222	; 0xde
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	0112      	lsls	r2, r2, #4
 8002080:	188a      	adds	r2, r1, r2
 8002082:	18d3      	adds	r3, r2, r3
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	0e1a      	lsrs	r2, r3, #24
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	3307      	adds	r3, #7
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d108      	bne.n	80020a8 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2120      	movs	r1, #32
 80020a2:	430a      	orrs	r2, r1
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	e007      	b.n	80020b8 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691a      	ldr	r2, [r3, #16]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2120      	movs	r1, #32
 80020b4:	430a      	orrs	r2, r1
 80020b6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	e007      	b.n	80020cc <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	2280      	movs	r2, #128	; 0x80
 80020c2:	02d2      	lsls	r2, r2, #11
 80020c4:	431a      	orrs	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
  }
}
 80020cc:	0018      	movs	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b006      	add	sp, #24
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020de:	200f      	movs	r0, #15
 80020e0:	183b      	adds	r3, r7, r0
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	2120      	movs	r1, #32
 80020e6:	5c52      	ldrb	r2, [r2, r1]
 80020e8:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80020ea:	0002      	movs	r2, r0
 80020ec:	18bb      	adds	r3, r7, r2
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d003      	beq.n	80020fc <HAL_CAN_ActivateNotification+0x28>
 80020f4:	18bb      	adds	r3, r7, r2
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d109      	bne.n	8002110 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6959      	ldr	r1, [r3, #20]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	e007      	b.n	8002120 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	2280      	movs	r2, #128	; 0x80
 8002116:	02d2      	lsls	r2, r2, #11
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
  }
}
 8002120:	0018      	movs	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	b004      	add	sp, #16
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002130:	2300      	movs	r3, #0
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	2201      	movs	r2, #1
 8002168:	4013      	ands	r3, r2
 800216a:	d100      	bne.n	800216e <HAL_CAN_IRQHandler+0x46>
 800216c:	e084      	b.n	8002278 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	2201      	movs	r2, #1
 8002172:	4013      	ands	r3, r2
 8002174:	d024      	beq.n	80021c0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2201      	movs	r2, #1
 800217c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	2202      	movs	r2, #2
 8002182:	4013      	ands	r3, r2
 8002184:	d004      	beq.n	8002190 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	0018      	movs	r0, r3
 800218a:	f000 f981 	bl	8002490 <HAL_CAN_TxMailbox0CompleteCallback>
 800218e:	e017      	b.n	80021c0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	2204      	movs	r2, #4
 8002194:	4013      	ands	r3, r2
 8002196:	d005      	beq.n	80021a4 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	2280      	movs	r2, #128	; 0x80
 800219c:	0112      	lsls	r2, r2, #4
 800219e:	4313      	orrs	r3, r2
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
 80021a2:	e00d      	b.n	80021c0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	2208      	movs	r2, #8
 80021a8:	4013      	ands	r3, r2
 80021aa:	d005      	beq.n	80021b8 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	2280      	movs	r2, #128	; 0x80
 80021b0:	0152      	lsls	r2, r2, #5
 80021b2:	4313      	orrs	r3, r2
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
 80021b6:	e003      	b.n	80021c0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	0018      	movs	r0, r3
 80021bc:	f000 f980 	bl	80024c0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	4013      	ands	r3, r2
 80021c8:	d028      	beq.n	800221c <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2280      	movs	r2, #128	; 0x80
 80021d0:	0052      	lsls	r2, r2, #1
 80021d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4013      	ands	r3, r2
 80021dc:	d004      	beq.n	80021e8 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	0018      	movs	r0, r3
 80021e2:	f000 f95d 	bl	80024a0 <HAL_CAN_TxMailbox1CompleteCallback>
 80021e6:	e019      	b.n	800221c <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4013      	ands	r3, r2
 80021f0:	d005      	beq.n	80021fe <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	2280      	movs	r2, #128	; 0x80
 80021f6:	0192      	lsls	r2, r2, #6
 80021f8:	4313      	orrs	r3, r2
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
 80021fc:	e00e      	b.n	800221c <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	4013      	ands	r3, r2
 8002206:	d005      	beq.n	8002214 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	2280      	movs	r2, #128	; 0x80
 800220c:	01d2      	lsls	r2, r2, #7
 800220e:	4313      	orrs	r3, r2
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
 8002212:	e003      	b.n	800221c <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	0018      	movs	r0, r3
 8002218:	f000 f95a 	bl	80024d0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	025b      	lsls	r3, r3, #9
 8002222:	4013      	ands	r3, r2
 8002224:	d028      	beq.n	8002278 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2280      	movs	r2, #128	; 0x80
 800222c:	0252      	lsls	r2, r2, #9
 800222e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	029b      	lsls	r3, r3, #10
 8002236:	4013      	ands	r3, r2
 8002238:	d004      	beq.n	8002244 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	0018      	movs	r0, r3
 800223e:	f000 f937 	bl	80024b0 <HAL_CAN_TxMailbox2CompleteCallback>
 8002242:	e019      	b.n	8002278 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	02db      	lsls	r3, r3, #11
 800224a:	4013      	ands	r3, r2
 800224c:	d005      	beq.n	800225a <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	2280      	movs	r2, #128	; 0x80
 8002252:	0212      	lsls	r2, r2, #8
 8002254:	4313      	orrs	r3, r2
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
 8002258:	e00e      	b.n	8002278 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	2380      	movs	r3, #128	; 0x80
 800225e:	031b      	lsls	r3, r3, #12
 8002260:	4013      	ands	r3, r2
 8002262:	d005      	beq.n	8002270 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	2280      	movs	r2, #128	; 0x80
 8002268:	0252      	lsls	r2, r2, #9
 800226a:	4313      	orrs	r3, r2
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
 800226e:	e003      	b.n	8002278 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	0018      	movs	r0, r3
 8002274:	f000 f934 	bl	80024e0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	2208      	movs	r2, #8
 800227c:	4013      	ands	r3, r2
 800227e:	d00c      	beq.n	800229a <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2210      	movs	r2, #16
 8002284:	4013      	ands	r3, r2
 8002286:	d008      	beq.n	800229a <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	2280      	movs	r2, #128	; 0x80
 800228c:	0092      	lsls	r2, r2, #2
 800228e:	4313      	orrs	r3, r2
 8002290:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2210      	movs	r2, #16
 8002298:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	2204      	movs	r2, #4
 800229e:	4013      	ands	r3, r2
 80022a0:	d00b      	beq.n	80022ba <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2208      	movs	r2, #8
 80022a6:	4013      	ands	r3, r2
 80022a8:	d007      	beq.n	80022ba <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2208      	movs	r2, #8
 80022b0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	0018      	movs	r0, r3
 80022b6:	f000 f91b 	bl	80024f0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	2202      	movs	r2, #2
 80022be:	4013      	ands	r3, r2
 80022c0:	d009      	beq.n	80022d6 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2203      	movs	r2, #3
 80022ca:	4013      	ands	r3, r2
 80022cc:	d003      	beq.n	80022d6 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	0018      	movs	r0, r3
 80022d2:	f7fd ffb3 	bl	800023c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	2240      	movs	r2, #64	; 0x40
 80022da:	4013      	ands	r3, r2
 80022dc:	d00c      	beq.n	80022f8 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2210      	movs	r2, #16
 80022e2:	4013      	ands	r3, r2
 80022e4:	d008      	beq.n	80022f8 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	2280      	movs	r2, #128	; 0x80
 80022ea:	00d2      	lsls	r2, r2, #3
 80022ec:	4313      	orrs	r3, r2
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2210      	movs	r2, #16
 80022f6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	2220      	movs	r2, #32
 80022fc:	4013      	ands	r3, r2
 80022fe:	d00b      	beq.n	8002318 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	2208      	movs	r2, #8
 8002304:	4013      	ands	r3, r2
 8002306:	d007      	beq.n	8002318 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2208      	movs	r2, #8
 800230e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	0018      	movs	r0, r3
 8002314:	f000 f8fc 	bl	8002510 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	2210      	movs	r2, #16
 800231c:	4013      	ands	r3, r2
 800231e:	d009      	beq.n	8002334 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	2203      	movs	r2, #3
 8002328:	4013      	ands	r3, r2
 800232a:	d003      	beq.n	8002334 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	0018      	movs	r0, r3
 8002330:	f000 f8e6 	bl	8002500 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002334:	6a3a      	ldr	r2, [r7, #32]
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	029b      	lsls	r3, r3, #10
 800233a:	4013      	ands	r3, r2
 800233c:	d00b      	beq.n	8002356 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	2210      	movs	r2, #16
 8002342:	4013      	ands	r3, r2
 8002344:	d007      	beq.n	8002356 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2210      	movs	r2, #16
 800234c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	0018      	movs	r0, r3
 8002352:	f000 f8e5 	bl	8002520 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002356:	6a3a      	ldr	r2, [r7, #32]
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	025b      	lsls	r3, r3, #9
 800235c:	4013      	ands	r3, r2
 800235e:	d00b      	beq.n	8002378 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	2208      	movs	r2, #8
 8002364:	4013      	ands	r3, r2
 8002366:	d007      	beq.n	8002378 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2208      	movs	r2, #8
 800236e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	0018      	movs	r0, r3
 8002374:	f000 f8dc 	bl	8002530 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002378:	6a3a      	ldr	r2, [r7, #32]
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	4013      	ands	r3, r2
 8002380:	d100      	bne.n	8002384 <HAL_CAN_IRQHandler+0x25c>
 8002382:	e074      	b.n	800246e <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	2204      	movs	r2, #4
 8002388:	4013      	ands	r3, r2
 800238a:	d100      	bne.n	800238e <HAL_CAN_IRQHandler+0x266>
 800238c:	e06b      	b.n	8002466 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800238e:	6a3a      	ldr	r2, [r7, #32]
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4013      	ands	r3, r2
 8002396:	d007      	beq.n	80023a8 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2201      	movs	r2, #1
 800239c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800239e:	d003      	beq.n	80023a8 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	2201      	movs	r2, #1
 80023a4:	4313      	orrs	r3, r2
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023a8:	6a3a      	ldr	r2, [r7, #32]
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4013      	ands	r3, r2
 80023b0:	d007      	beq.n	80023c2 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2202      	movs	r2, #2
 80023b6:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023b8:	d003      	beq.n	80023c2 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	2202      	movs	r2, #2
 80023be:	4313      	orrs	r3, r2
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023c2:	6a3a      	ldr	r2, [r7, #32]
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4013      	ands	r3, r2
 80023ca:	d007      	beq.n	80023dc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2204      	movs	r2, #4
 80023d0:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023d2:	d003      	beq.n	80023dc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	2204      	movs	r2, #4
 80023d8:	4313      	orrs	r3, r2
 80023da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023dc:	6a3a      	ldr	r2, [r7, #32]
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	4013      	ands	r3, r2
 80023e4:	d03f      	beq.n	8002466 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2270      	movs	r2, #112	; 0x70
 80023ea:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023ec:	d03b      	beq.n	8002466 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2270      	movs	r2, #112	; 0x70
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b60      	cmp	r3, #96	; 0x60
 80023f6:	d027      	beq.n	8002448 <HAL_CAN_IRQHandler+0x320>
 80023f8:	d82c      	bhi.n	8002454 <HAL_CAN_IRQHandler+0x32c>
 80023fa:	2b50      	cmp	r3, #80	; 0x50
 80023fc:	d01f      	beq.n	800243e <HAL_CAN_IRQHandler+0x316>
 80023fe:	d829      	bhi.n	8002454 <HAL_CAN_IRQHandler+0x32c>
 8002400:	2b40      	cmp	r3, #64	; 0x40
 8002402:	d017      	beq.n	8002434 <HAL_CAN_IRQHandler+0x30c>
 8002404:	d826      	bhi.n	8002454 <HAL_CAN_IRQHandler+0x32c>
 8002406:	2b30      	cmp	r3, #48	; 0x30
 8002408:	d00f      	beq.n	800242a <HAL_CAN_IRQHandler+0x302>
 800240a:	d823      	bhi.n	8002454 <HAL_CAN_IRQHandler+0x32c>
 800240c:	2b10      	cmp	r3, #16
 800240e:	d002      	beq.n	8002416 <HAL_CAN_IRQHandler+0x2ee>
 8002410:	2b20      	cmp	r3, #32
 8002412:	d005      	beq.n	8002420 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002414:	e01e      	b.n	8002454 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	2208      	movs	r2, #8
 800241a:	4313      	orrs	r3, r2
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800241e:	e01a      	b.n	8002456 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	2210      	movs	r2, #16
 8002424:	4313      	orrs	r3, r2
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002428:	e015      	b.n	8002456 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	2220      	movs	r2, #32
 800242e:	4313      	orrs	r3, r2
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002432:	e010      	b.n	8002456 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	2240      	movs	r2, #64	; 0x40
 8002438:	4313      	orrs	r3, r2
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800243c:	e00b      	b.n	8002456 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	2280      	movs	r2, #128	; 0x80
 8002442:	4313      	orrs	r3, r2
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002446:	e006      	b.n	8002456 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	2280      	movs	r2, #128	; 0x80
 800244c:	0052      	lsls	r2, r2, #1
 800244e:	4313      	orrs	r3, r2
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002452:	e000      	b.n	8002456 <HAL_CAN_IRQHandler+0x32e>
            break;
 8002454:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699a      	ldr	r2, [r3, #24]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2170      	movs	r1, #112	; 0x70
 8002462:	438a      	bics	r2, r1
 8002464:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2204      	movs	r2, #4
 800246c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	2b00      	cmp	r3, #0
 8002472:	d009      	beq.n	8002488 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	0018      	movs	r0, r3
 8002484:	f000 f85c 	bl	8002540 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002488:	46c0      	nop			; (mov r8, r8)
 800248a:	46bd      	mov	sp, r7
 800248c:	b00a      	add	sp, #40	; 0x28
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002498:	46c0      	nop			; (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b002      	add	sp, #8
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80024a8:	46c0      	nop			; (mov r8, r8)
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b002      	add	sp, #8
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80024b8:	46c0      	nop			; (mov r8, r8)
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b002      	add	sp, #8
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024c8:	46c0      	nop			; (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b002      	add	sp, #8
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80024d8:	46c0      	nop			; (mov r8, r8)
 80024da:	46bd      	mov	sp, r7
 80024dc:	b002      	add	sp, #8
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80024e8:	46c0      	nop			; (mov r8, r8)
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b002      	add	sp, #8
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80024f8:	46c0      	nop			; (mov r8, r8)
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b002      	add	sp, #8
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002508:	46c0      	nop			; (mov r8, r8)
 800250a:	46bd      	mov	sp, r7
 800250c:	b002      	add	sp, #8
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002518:	46c0      	nop			; (mov r8, r8)
 800251a:	46bd      	mov	sp, r7
 800251c:	b002      	add	sp, #8
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002528:	46c0      	nop			; (mov r8, r8)
 800252a:	46bd      	mov	sp, r7
 800252c:	b002      	add	sp, #8
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002538:	46c0      	nop			; (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	b002      	add	sp, #8
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002548:	46c0      	nop			; (mov r8, r8)
 800254a:	46bd      	mov	sp, r7
 800254c:	b002      	add	sp, #8
 800254e:	bd80      	pop	{r7, pc}

08002550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	0002      	movs	r2, r0
 8002558:	1dfb      	adds	r3, r7, #7
 800255a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800255c:	1dfb      	adds	r3, r7, #7
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b7f      	cmp	r3, #127	; 0x7f
 8002562:	d809      	bhi.n	8002578 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002564:	1dfb      	adds	r3, r7, #7
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	001a      	movs	r2, r3
 800256a:	231f      	movs	r3, #31
 800256c:	401a      	ands	r2, r3
 800256e:	4b04      	ldr	r3, [pc, #16]	; (8002580 <__NVIC_EnableIRQ+0x30>)
 8002570:	2101      	movs	r1, #1
 8002572:	4091      	lsls	r1, r2
 8002574:	000a      	movs	r2, r1
 8002576:	601a      	str	r2, [r3, #0]
  }
}
 8002578:	46c0      	nop			; (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	b002      	add	sp, #8
 800257e:	bd80      	pop	{r7, pc}
 8002580:	e000e100 	.word	0xe000e100

08002584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002584:	b590      	push	{r4, r7, lr}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	0002      	movs	r2, r0
 800258c:	6039      	str	r1, [r7, #0]
 800258e:	1dfb      	adds	r3, r7, #7
 8002590:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002592:	1dfb      	adds	r3, r7, #7
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b7f      	cmp	r3, #127	; 0x7f
 8002598:	d828      	bhi.n	80025ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800259a:	4a2f      	ldr	r2, [pc, #188]	; (8002658 <__NVIC_SetPriority+0xd4>)
 800259c:	1dfb      	adds	r3, r7, #7
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	b25b      	sxtb	r3, r3
 80025a2:	089b      	lsrs	r3, r3, #2
 80025a4:	33c0      	adds	r3, #192	; 0xc0
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	589b      	ldr	r3, [r3, r2]
 80025aa:	1dfa      	adds	r2, r7, #7
 80025ac:	7812      	ldrb	r2, [r2, #0]
 80025ae:	0011      	movs	r1, r2
 80025b0:	2203      	movs	r2, #3
 80025b2:	400a      	ands	r2, r1
 80025b4:	00d2      	lsls	r2, r2, #3
 80025b6:	21ff      	movs	r1, #255	; 0xff
 80025b8:	4091      	lsls	r1, r2
 80025ba:	000a      	movs	r2, r1
 80025bc:	43d2      	mvns	r2, r2
 80025be:	401a      	ands	r2, r3
 80025c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	019b      	lsls	r3, r3, #6
 80025c6:	22ff      	movs	r2, #255	; 0xff
 80025c8:	401a      	ands	r2, r3
 80025ca:	1dfb      	adds	r3, r7, #7
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	0018      	movs	r0, r3
 80025d0:	2303      	movs	r3, #3
 80025d2:	4003      	ands	r3, r0
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025d8:	481f      	ldr	r0, [pc, #124]	; (8002658 <__NVIC_SetPriority+0xd4>)
 80025da:	1dfb      	adds	r3, r7, #7
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	b25b      	sxtb	r3, r3
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	430a      	orrs	r2, r1
 80025e4:	33c0      	adds	r3, #192	; 0xc0
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80025ea:	e031      	b.n	8002650 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025ec:	4a1b      	ldr	r2, [pc, #108]	; (800265c <__NVIC_SetPriority+0xd8>)
 80025ee:	1dfb      	adds	r3, r7, #7
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	0019      	movs	r1, r3
 80025f4:	230f      	movs	r3, #15
 80025f6:	400b      	ands	r3, r1
 80025f8:	3b08      	subs	r3, #8
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	3306      	adds	r3, #6
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	18d3      	adds	r3, r2, r3
 8002602:	3304      	adds	r3, #4
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	1dfa      	adds	r2, r7, #7
 8002608:	7812      	ldrb	r2, [r2, #0]
 800260a:	0011      	movs	r1, r2
 800260c:	2203      	movs	r2, #3
 800260e:	400a      	ands	r2, r1
 8002610:	00d2      	lsls	r2, r2, #3
 8002612:	21ff      	movs	r1, #255	; 0xff
 8002614:	4091      	lsls	r1, r2
 8002616:	000a      	movs	r2, r1
 8002618:	43d2      	mvns	r2, r2
 800261a:	401a      	ands	r2, r3
 800261c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	019b      	lsls	r3, r3, #6
 8002622:	22ff      	movs	r2, #255	; 0xff
 8002624:	401a      	ands	r2, r3
 8002626:	1dfb      	adds	r3, r7, #7
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	0018      	movs	r0, r3
 800262c:	2303      	movs	r3, #3
 800262e:	4003      	ands	r3, r0
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002634:	4809      	ldr	r0, [pc, #36]	; (800265c <__NVIC_SetPriority+0xd8>)
 8002636:	1dfb      	adds	r3, r7, #7
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	001c      	movs	r4, r3
 800263c:	230f      	movs	r3, #15
 800263e:	4023      	ands	r3, r4
 8002640:	3b08      	subs	r3, #8
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	430a      	orrs	r2, r1
 8002646:	3306      	adds	r3, #6
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	18c3      	adds	r3, r0, r3
 800264c:	3304      	adds	r3, #4
 800264e:	601a      	str	r2, [r3, #0]
}
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	b003      	add	sp, #12
 8002656:	bd90      	pop	{r4, r7, pc}
 8002658:	e000e100 	.word	0xe000e100
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	1e5a      	subs	r2, r3, #1
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	045b      	lsls	r3, r3, #17
 8002670:	429a      	cmp	r2, r3
 8002672:	d301      	bcc.n	8002678 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002674:	2301      	movs	r3, #1
 8002676:	e010      	b.n	800269a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002678:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <SysTick_Config+0x44>)
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	3a01      	subs	r2, #1
 800267e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002680:	2301      	movs	r3, #1
 8002682:	425b      	negs	r3, r3
 8002684:	2103      	movs	r1, #3
 8002686:	0018      	movs	r0, r3
 8002688:	f7ff ff7c 	bl	8002584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <SysTick_Config+0x44>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <SysTick_Config+0x44>)
 8002694:	2207      	movs	r2, #7
 8002696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002698:	2300      	movs	r3, #0
}
 800269a:	0018      	movs	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	b002      	add	sp, #8
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	e000e010 	.word	0xe000e010

080026a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
 80026b2:	210f      	movs	r1, #15
 80026b4:	187b      	adds	r3, r7, r1
 80026b6:	1c02      	adds	r2, r0, #0
 80026b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	187b      	adds	r3, r7, r1
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	b25b      	sxtb	r3, r3
 80026c2:	0011      	movs	r1, r2
 80026c4:	0018      	movs	r0, r3
 80026c6:	f7ff ff5d 	bl	8002584 <__NVIC_SetPriority>
}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b004      	add	sp, #16
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	0002      	movs	r2, r0
 80026da:	1dfb      	adds	r3, r7, #7
 80026dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026de:	1dfb      	adds	r3, r7, #7
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	b25b      	sxtb	r3, r3
 80026e4:	0018      	movs	r0, r3
 80026e6:	f7ff ff33 	bl	8002550 <__NVIC_EnableIRQ>
}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b002      	add	sp, #8
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f7ff ffaf 	bl	8002660 <SysTick_Config>
 8002702:	0003      	movs	r3, r0
}
 8002704:	0018      	movs	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	b002      	add	sp, #8
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e036      	b.n	8002790 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2221      	movs	r2, #33	; 0x21
 8002726:	2102      	movs	r1, #2
 8002728:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4a18      	ldr	r2, [pc, #96]	; (8002798 <HAL_DMA_Init+0x8c>)
 8002736:	4013      	ands	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002742:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800274e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800275a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	0018      	movs	r0, r3
 8002774:	f000 f97e 	bl	8002a74 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2221      	movs	r2, #33	; 0x21
 8002782:	2101      	movs	r1, #1
 8002784:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2220      	movs	r2, #32
 800278a:	2100      	movs	r1, #0
 800278c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}  
 8002790:	0018      	movs	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	b004      	add	sp, #16
 8002796:	bd80      	pop	{r7, pc}
 8002798:	ffffc00f 	.word	0xffffc00f

0800279c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80027aa:	2317      	movs	r3, #23
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2220      	movs	r2, #32
 80027b6:	5c9b      	ldrb	r3, [r3, r2]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_DMA_Start_IT+0x24>
 80027bc:	2302      	movs	r3, #2
 80027be:	e04f      	b.n	8002860 <HAL_DMA_Start_IT+0xc4>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	2101      	movs	r1, #1
 80027c6:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2221      	movs	r2, #33	; 0x21
 80027cc:	5c9b      	ldrb	r3, [r3, r2]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d13a      	bne.n	800284a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2221      	movs	r2, #33	; 0x21
 80027d8:	2102      	movs	r1, #2
 80027da:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2101      	movs	r1, #1
 80027ee:	438a      	bics	r2, r1
 80027f0:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 f90f 	bl	8002a1c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	2b00      	cmp	r3, #0
 8002804:	d008      	beq.n	8002818 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	210e      	movs	r1, #14
 8002812:	430a      	orrs	r2, r1
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	e00f      	b.n	8002838 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	210a      	movs	r1, #10
 8002824:	430a      	orrs	r2, r1
 8002826:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2104      	movs	r1, #4
 8002834:	438a      	bics	r2, r1
 8002836:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2101      	movs	r1, #1
 8002844:	430a      	orrs	r2, r1
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	e007      	b.n	800285a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2220      	movs	r2, #32
 800284e:	2100      	movs	r1, #0
 8002850:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002852:	2317      	movs	r3, #23
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	2202      	movs	r2, #2
 8002858:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800285a:	2317      	movs	r3, #23
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	781b      	ldrb	r3, [r3, #0]
} 
 8002860:	0018      	movs	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	b006      	add	sp, #24
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2221      	movs	r2, #33	; 0x21
 8002874:	5c9b      	ldrb	r3, [r3, r2]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d008      	beq.n	800288e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2204      	movs	r2, #4
 8002880:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2220      	movs	r2, #32
 8002886:	2100      	movs	r1, #0
 8002888:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e020      	b.n	80028d0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	210e      	movs	r1, #14
 800289a:	438a      	bics	r2, r1
 800289c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2101      	movs	r1, #1
 80028aa:	438a      	bics	r2, r1
 80028ac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b6:	2101      	movs	r1, #1
 80028b8:	4091      	lsls	r1, r2
 80028ba:	000a      	movs	r2, r1
 80028bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2221      	movs	r2, #33	; 0x21
 80028c2:	2101      	movs	r1, #1
 80028c4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2220      	movs	r2, #32
 80028ca:	2100      	movs	r1, #0
 80028cc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	0018      	movs	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b002      	add	sp, #8
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	2204      	movs	r2, #4
 80028f6:	409a      	lsls	r2, r3
 80028f8:	0013      	movs	r3, r2
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4013      	ands	r3, r2
 80028fe:	d024      	beq.n	800294a <HAL_DMA_IRQHandler+0x72>
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2204      	movs	r2, #4
 8002904:	4013      	ands	r3, r2
 8002906:	d020      	beq.n	800294a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2220      	movs	r2, #32
 8002910:	4013      	ands	r3, r2
 8002912:	d107      	bne.n	8002924 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2104      	movs	r1, #4
 8002920:	438a      	bics	r2, r1
 8002922:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292c:	2104      	movs	r1, #4
 800292e:	4091      	lsls	r1, r2
 8002930:	000a      	movs	r2, r1
 8002932:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	2b00      	cmp	r3, #0
 800293a:	d100      	bne.n	800293e <HAL_DMA_IRQHandler+0x66>
 800293c:	e06a      	b.n	8002a14 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	0010      	movs	r0, r2
 8002946:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002948:	e064      	b.n	8002a14 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	2202      	movs	r2, #2
 8002950:	409a      	lsls	r2, r3
 8002952:	0013      	movs	r3, r2
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4013      	ands	r3, r2
 8002958:	d02b      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xda>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2202      	movs	r2, #2
 800295e:	4013      	ands	r3, r2
 8002960:	d027      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2220      	movs	r2, #32
 800296a:	4013      	ands	r3, r2
 800296c:	d10b      	bne.n	8002986 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	210a      	movs	r1, #10
 800297a:	438a      	bics	r2, r1
 800297c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2221      	movs	r2, #33	; 0x21
 8002982:	2101      	movs	r1, #1
 8002984:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298e:	2102      	movs	r1, #2
 8002990:	4091      	lsls	r1, r2
 8002992:	000a      	movs	r2, r1
 8002994:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2220      	movs	r2, #32
 800299a:	2100      	movs	r1, #0
 800299c:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d036      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	0010      	movs	r0, r2
 80029ae:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80029b0:	e030      	b.n	8002a14 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	2208      	movs	r2, #8
 80029b8:	409a      	lsls	r2, r3
 80029ba:	0013      	movs	r3, r2
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	4013      	ands	r3, r2
 80029c0:	d028      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x13c>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2208      	movs	r2, #8
 80029c6:	4013      	ands	r3, r2
 80029c8:	d024      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	210e      	movs	r1, #14
 80029d6:	438a      	bics	r2, r1
 80029d8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e2:	2101      	movs	r1, #1
 80029e4:	4091      	lsls	r1, r2
 80029e6:	000a      	movs	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2221      	movs	r2, #33	; 0x21
 80029f4:	2101      	movs	r1, #1
 80029f6:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2220      	movs	r2, #32
 80029fc:	2100      	movs	r1, #0
 80029fe:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	0010      	movs	r0, r2
 8002a10:	4798      	blx	r3
    }
   }
}  
 8002a12:	e7ff      	b.n	8002a14 <HAL_DMA_IRQHandler+0x13c>
 8002a14:	46c0      	nop			; (mov r8, r8)
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b004      	add	sp, #16
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a32:	2101      	movs	r1, #1
 8002a34:	4091      	lsls	r1, r2
 8002a36:	000a      	movs	r2, r1
 8002a38:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b10      	cmp	r3, #16
 8002a48:	d108      	bne.n	8002a5c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a5a:	e007      	b.n	8002a6c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	60da      	str	r2, [r3, #12]
}
 8002a6c:	46c0      	nop			; (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b004      	add	sp, #16
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a08      	ldr	r2, [pc, #32]	; (8002aa4 <DMA_CalcBaseAndBitshift+0x30>)
 8002a82:	4694      	mov	ip, r2
 8002a84:	4463      	add	r3, ip
 8002a86:	2114      	movs	r1, #20
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f7fd fb3d 	bl	8000108 <__udivsi3>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	009a      	lsls	r2, r3, #2
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a03      	ldr	r2, [pc, #12]	; (8002aa8 <DMA_CalcBaseAndBitshift+0x34>)
 8002a9a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002a9c:	46c0      	nop			; (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b002      	add	sp, #8
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	bffdfff8 	.word	0xbffdfff8
 8002aa8:	40020000 	.word	0x40020000

08002aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aba:	e149      	b.n	8002d50 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4091      	lsls	r1, r2
 8002ac6:	000a      	movs	r2, r1
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d100      	bne.n	8002ad4 <HAL_GPIO_Init+0x28>
 8002ad2:	e13a      	b.n	8002d4a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d00b      	beq.n	8002af4 <HAL_GPIO_Init+0x48>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d007      	beq.n	8002af4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ae8:	2b11      	cmp	r3, #17
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b12      	cmp	r3, #18
 8002af2:	d130      	bne.n	8002b56 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	409a      	lsls	r2, r3
 8002b02:	0013      	movs	r3, r2
 8002b04:	43da      	mvns	r2, r3
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	409a      	lsls	r2, r3
 8002b16:	0013      	movs	r3, r2
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	0013      	movs	r3, r2
 8002b32:	43da      	mvns	r2, r3
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	091b      	lsrs	r3, r3, #4
 8002b40:	2201      	movs	r2, #1
 8002b42:	401a      	ands	r2, r3
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	409a      	lsls	r2, r3
 8002b48:	0013      	movs	r3, r2
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	2203      	movs	r2, #3
 8002b62:	409a      	lsls	r2, r3
 8002b64:	0013      	movs	r3, r2
 8002b66:	43da      	mvns	r2, r3
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	409a      	lsls	r2, r3
 8002b78:	0013      	movs	r3, r2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_Init+0xea>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b12      	cmp	r3, #18
 8002b94:	d123      	bne.n	8002bde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	08da      	lsrs	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3208      	adds	r2, #8
 8002b9e:	0092      	lsls	r2, r2, #2
 8002ba0:	58d3      	ldr	r3, [r2, r3]
 8002ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2207      	movs	r2, #7
 8002ba8:	4013      	ands	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	220f      	movs	r2, #15
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	0013      	movs	r3, r2
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	691a      	ldr	r2, [r3, #16]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2107      	movs	r1, #7
 8002bc2:	400b      	ands	r3, r1
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	0013      	movs	r3, r2
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	08da      	lsrs	r2, r3, #3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3208      	adds	r2, #8
 8002bd8:	0092      	lsls	r2, r2, #2
 8002bda:	6939      	ldr	r1, [r7, #16]
 8002bdc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	2203      	movs	r2, #3
 8002bea:	409a      	lsls	r2, r3
 8002bec:	0013      	movs	r3, r2
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	401a      	ands	r2, r3
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	409a      	lsls	r2, r3
 8002c04:	0013      	movs	r3, r2
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	2380      	movs	r3, #128	; 0x80
 8002c18:	055b      	lsls	r3, r3, #21
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d100      	bne.n	8002c20 <HAL_GPIO_Init+0x174>
 8002c1e:	e094      	b.n	8002d4a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c20:	4b51      	ldr	r3, [pc, #324]	; (8002d68 <HAL_GPIO_Init+0x2bc>)
 8002c22:	699a      	ldr	r2, [r3, #24]
 8002c24:	4b50      	ldr	r3, [pc, #320]	; (8002d68 <HAL_GPIO_Init+0x2bc>)
 8002c26:	2101      	movs	r1, #1
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	619a      	str	r2, [r3, #24]
 8002c2c:	4b4e      	ldr	r3, [pc, #312]	; (8002d68 <HAL_GPIO_Init+0x2bc>)
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	2201      	movs	r2, #1
 8002c32:	4013      	ands	r3, r2
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c38:	4a4c      	ldr	r2, [pc, #304]	; (8002d6c <HAL_GPIO_Init+0x2c0>)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	089b      	lsrs	r3, r3, #2
 8002c3e:	3302      	adds	r3, #2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	589b      	ldr	r3, [r3, r2]
 8002c44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2203      	movs	r2, #3
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	220f      	movs	r2, #15
 8002c50:	409a      	lsls	r2, r3
 8002c52:	0013      	movs	r3, r2
 8002c54:	43da      	mvns	r2, r3
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	2390      	movs	r3, #144	; 0x90
 8002c60:	05db      	lsls	r3, r3, #23
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d00d      	beq.n	8002c82 <HAL_GPIO_Init+0x1d6>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a41      	ldr	r2, [pc, #260]	; (8002d70 <HAL_GPIO_Init+0x2c4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d007      	beq.n	8002c7e <HAL_GPIO_Init+0x1d2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a40      	ldr	r2, [pc, #256]	; (8002d74 <HAL_GPIO_Init+0x2c8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d101      	bne.n	8002c7a <HAL_GPIO_Init+0x1ce>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e004      	b.n	8002c84 <HAL_GPIO_Init+0x1d8>
 8002c7a:	2305      	movs	r3, #5
 8002c7c:	e002      	b.n	8002c84 <HAL_GPIO_Init+0x1d8>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <HAL_GPIO_Init+0x1d8>
 8002c82:	2300      	movs	r3, #0
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	2103      	movs	r1, #3
 8002c88:	400a      	ands	r2, r1
 8002c8a:	0092      	lsls	r2, r2, #2
 8002c8c:	4093      	lsls	r3, r2
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c94:	4935      	ldr	r1, [pc, #212]	; (8002d6c <HAL_GPIO_Init+0x2c0>)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	089b      	lsrs	r3, r3, #2
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ca2:	4b35      	ldr	r3, [pc, #212]	; (8002d78 <HAL_GPIO_Init+0x2cc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	43da      	mvns	r2, r3
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	2380      	movs	r3, #128	; 0x80
 8002cb8:	025b      	lsls	r3, r3, #9
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002cc6:	4b2c      	ldr	r3, [pc, #176]	; (8002d78 <HAL_GPIO_Init+0x2cc>)
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002ccc:	4b2a      	ldr	r3, [pc, #168]	; (8002d78 <HAL_GPIO_Init+0x2cc>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	43da      	mvns	r2, r3
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	029b      	lsls	r3, r3, #10
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d003      	beq.n	8002cf0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002cf0:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <HAL_GPIO_Init+0x2cc>)
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cf6:	4b20      	ldr	r3, [pc, #128]	; (8002d78 <HAL_GPIO_Init+0x2cc>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4013      	ands	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	035b      	lsls	r3, r3, #13
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d1a:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <HAL_GPIO_Init+0x2cc>)
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002d20:	4b15      	ldr	r3, [pc, #84]	; (8002d78 <HAL_GPIO_Init+0x2cc>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	43da      	mvns	r2, r3
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	039b      	lsls	r3, r3, #14
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d003      	beq.n	8002d44 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <HAL_GPIO_Init+0x2cc>)
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	40da      	lsrs	r2, r3
 8002d58:	1e13      	subs	r3, r2, #0
 8002d5a:	d000      	beq.n	8002d5e <HAL_GPIO_Init+0x2b2>
 8002d5c:	e6ae      	b.n	8002abc <HAL_GPIO_Init+0x10>
  } 
}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	46c0      	nop			; (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b006      	add	sp, #24
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40010000 	.word	0x40010000
 8002d70:	48000400 	.word	0x48000400
 8002d74:	48000800 	.word	0x48000800
 8002d78:	40010400 	.word	0x40010400

08002d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	0008      	movs	r0, r1
 8002d86:	0011      	movs	r1, r2
 8002d88:	1cbb      	adds	r3, r7, #2
 8002d8a:	1c02      	adds	r2, r0, #0
 8002d8c:	801a      	strh	r2, [r3, #0]
 8002d8e:	1c7b      	adds	r3, r7, #1
 8002d90:	1c0a      	adds	r2, r1, #0
 8002d92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d94:	1c7b      	adds	r3, r7, #1
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d004      	beq.n	8002da6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d9c:	1cbb      	adds	r3, r7, #2
 8002d9e:	881a      	ldrh	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002da4:	e003      	b.n	8002dae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002da6:	1cbb      	adds	r3, r7, #2
 8002da8:	881a      	ldrh	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b002      	add	sp, #8
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b084      	sub	sp, #16
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	000a      	movs	r2, r1
 8002dc0:	1cbb      	adds	r3, r7, #2
 8002dc2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dca:	1cbb      	adds	r3, r7, #2
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	041a      	lsls	r2, r3, #16
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	1cb9      	adds	r1, r7, #2
 8002dda:	8809      	ldrh	r1, [r1, #0]
 8002ddc:	400b      	ands	r3, r1
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	619a      	str	r2, [r3, #24]
}
 8002de4:	46c0      	nop			; (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b004      	add	sp, #16
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d102      	bne.n	8002e00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	f000 fb76 	bl	80034ec <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2201      	movs	r2, #1
 8002e06:	4013      	ands	r3, r2
 8002e08:	d100      	bne.n	8002e0c <HAL_RCC_OscConfig+0x20>
 8002e0a:	e08e      	b.n	8002f2a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e0c:	4bc5      	ldr	r3, [pc, #788]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	220c      	movs	r2, #12
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d00e      	beq.n	8002e36 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e18:	4bc2      	ldr	r3, [pc, #776]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	220c      	movs	r2, #12
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d117      	bne.n	8002e54 <HAL_RCC_OscConfig+0x68>
 8002e24:	4bbf      	ldr	r3, [pc, #764]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	23c0      	movs	r3, #192	; 0xc0
 8002e2a:	025b      	lsls	r3, r3, #9
 8002e2c:	401a      	ands	r2, r3
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	025b      	lsls	r3, r3, #9
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d10e      	bne.n	8002e54 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e36:	4bbb      	ldr	r3, [pc, #748]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	2380      	movs	r3, #128	; 0x80
 8002e3c:	029b      	lsls	r3, r3, #10
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d100      	bne.n	8002e44 <HAL_RCC_OscConfig+0x58>
 8002e42:	e071      	b.n	8002f28 <HAL_RCC_OscConfig+0x13c>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d000      	beq.n	8002e4e <HAL_RCC_OscConfig+0x62>
 8002e4c:	e06c      	b.n	8002f28 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	f000 fb4c 	bl	80034ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d107      	bne.n	8002e6c <HAL_RCC_OscConfig+0x80>
 8002e5c:	4bb1      	ldr	r3, [pc, #708]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4bb0      	ldr	r3, [pc, #704]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002e62:	2180      	movs	r1, #128	; 0x80
 8002e64:	0249      	lsls	r1, r1, #9
 8002e66:	430a      	orrs	r2, r1
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	e02f      	b.n	8002ecc <HAL_RCC_OscConfig+0xe0>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10c      	bne.n	8002e8e <HAL_RCC_OscConfig+0xa2>
 8002e74:	4bab      	ldr	r3, [pc, #684]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	4baa      	ldr	r3, [pc, #680]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002e7a:	49ab      	ldr	r1, [pc, #684]	; (8003128 <HAL_RCC_OscConfig+0x33c>)
 8002e7c:	400a      	ands	r2, r1
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	4ba8      	ldr	r3, [pc, #672]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4ba7      	ldr	r3, [pc, #668]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002e86:	49a9      	ldr	r1, [pc, #676]	; (800312c <HAL_RCC_OscConfig+0x340>)
 8002e88:	400a      	ands	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	e01e      	b.n	8002ecc <HAL_RCC_OscConfig+0xe0>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b05      	cmp	r3, #5
 8002e94:	d10e      	bne.n	8002eb4 <HAL_RCC_OscConfig+0xc8>
 8002e96:	4ba3      	ldr	r3, [pc, #652]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4ba2      	ldr	r3, [pc, #648]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002e9c:	2180      	movs	r1, #128	; 0x80
 8002e9e:	02c9      	lsls	r1, r1, #11
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	4b9f      	ldr	r3, [pc, #636]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4b9e      	ldr	r3, [pc, #632]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002eaa:	2180      	movs	r1, #128	; 0x80
 8002eac:	0249      	lsls	r1, r1, #9
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	e00b      	b.n	8002ecc <HAL_RCC_OscConfig+0xe0>
 8002eb4:	4b9b      	ldr	r3, [pc, #620]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4b9a      	ldr	r3, [pc, #616]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002eba:	499b      	ldr	r1, [pc, #620]	; (8003128 <HAL_RCC_OscConfig+0x33c>)
 8002ebc:	400a      	ands	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	4b98      	ldr	r3, [pc, #608]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4b97      	ldr	r3, [pc, #604]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002ec6:	4999      	ldr	r1, [pc, #612]	; (800312c <HAL_RCC_OscConfig+0x340>)
 8002ec8:	400a      	ands	r2, r1
 8002eca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d014      	beq.n	8002efe <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fd fefc 	bl	8000cd0 <HAL_GetTick>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ede:	f7fd fef7 	bl	8000cd0 <HAL_GetTick>
 8002ee2:	0002      	movs	r2, r0
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b64      	cmp	r3, #100	; 0x64
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e2fd      	b.n	80034ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef0:	4b8c      	ldr	r3, [pc, #560]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	2380      	movs	r3, #128	; 0x80
 8002ef6:	029b      	lsls	r3, r3, #10
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d0f0      	beq.n	8002ede <HAL_RCC_OscConfig+0xf2>
 8002efc:	e015      	b.n	8002f2a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efe:	f7fd fee7 	bl	8000cd0 <HAL_GetTick>
 8002f02:	0003      	movs	r3, r0
 8002f04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f08:	f7fd fee2 	bl	8000cd0 <HAL_GetTick>
 8002f0c:	0002      	movs	r2, r0
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	; 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e2e8      	b.n	80034ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1a:	4b82      	ldr	r3, [pc, #520]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	2380      	movs	r3, #128	; 0x80
 8002f20:	029b      	lsls	r3, r3, #10
 8002f22:	4013      	ands	r3, r2
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0x11c>
 8002f26:	e000      	b.n	8002f2a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f28:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	4013      	ands	r3, r2
 8002f32:	d100      	bne.n	8002f36 <HAL_RCC_OscConfig+0x14a>
 8002f34:	e06c      	b.n	8003010 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f36:	4b7b      	ldr	r3, [pc, #492]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	220c      	movs	r2, #12
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d00e      	beq.n	8002f5e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f40:	4b78      	ldr	r3, [pc, #480]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	220c      	movs	r2, #12
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d11f      	bne.n	8002f8c <HAL_RCC_OscConfig+0x1a0>
 8002f4c:	4b75      	ldr	r3, [pc, #468]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	23c0      	movs	r3, #192	; 0xc0
 8002f52:	025b      	lsls	r3, r3, #9
 8002f54:	401a      	ands	r2, r3
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	021b      	lsls	r3, r3, #8
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d116      	bne.n	8002f8c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5e:	4b71      	ldr	r3, [pc, #452]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2202      	movs	r2, #2
 8002f64:	4013      	ands	r3, r2
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_OscConfig+0x188>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e2bb      	b.n	80034ec <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f74:	4b6b      	ldr	r3, [pc, #428]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	22f8      	movs	r2, #248	; 0xf8
 8002f7a:	4393      	bics	r3, r2
 8002f7c:	0019      	movs	r1, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00da      	lsls	r2, r3, #3
 8002f84:	4b67      	ldr	r3, [pc, #412]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002f86:	430a      	orrs	r2, r1
 8002f88:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8a:	e041      	b.n	8003010 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d024      	beq.n	8002fde <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f94:	4b63      	ldr	r3, [pc, #396]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b62      	ldr	r3, [pc, #392]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fd fe96 	bl	8000cd0 <HAL_GetTick>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002faa:	f7fd fe91 	bl	8000cd0 <HAL_GetTick>
 8002fae:	0002      	movs	r2, r0
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e297      	b.n	80034ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbc:	4b59      	ldr	r3, [pc, #356]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d0f1      	beq.n	8002faa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc6:	4b57      	ldr	r3, [pc, #348]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	22f8      	movs	r2, #248	; 0xf8
 8002fcc:	4393      	bics	r3, r2
 8002fce:	0019      	movs	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	00da      	lsls	r2, r3, #3
 8002fd6:	4b53      	ldr	r3, [pc, #332]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	e018      	b.n	8003010 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fde:	4b51      	ldr	r3, [pc, #324]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	4b50      	ldr	r3, [pc, #320]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	438a      	bics	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fea:	f7fd fe71 	bl	8000cd0 <HAL_GetTick>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ff4:	f7fd fe6c 	bl	8000cd0 <HAL_GetTick>
 8002ff8:	0002      	movs	r2, r0
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e272      	b.n	80034ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003006:	4b47      	ldr	r3, [pc, #284]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2202      	movs	r2, #2
 800300c:	4013      	ands	r3, r2
 800300e:	d1f1      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2208      	movs	r2, #8
 8003016:	4013      	ands	r3, r2
 8003018:	d036      	beq.n	8003088 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d019      	beq.n	8003056 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003022:	4b40      	ldr	r3, [pc, #256]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8003024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003026:	4b3f      	ldr	r3, [pc, #252]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8003028:	2101      	movs	r1, #1
 800302a:	430a      	orrs	r2, r1
 800302c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800302e:	f7fd fe4f 	bl	8000cd0 <HAL_GetTick>
 8003032:	0003      	movs	r3, r0
 8003034:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003038:	f7fd fe4a 	bl	8000cd0 <HAL_GetTick>
 800303c:	0002      	movs	r2, r0
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e250      	b.n	80034ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304a:	4b36      	ldr	r3, [pc, #216]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	2202      	movs	r2, #2
 8003050:	4013      	ands	r3, r2
 8003052:	d0f1      	beq.n	8003038 <HAL_RCC_OscConfig+0x24c>
 8003054:	e018      	b.n	8003088 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003056:	4b33      	ldr	r3, [pc, #204]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8003058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800305a:	4b32      	ldr	r3, [pc, #200]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 800305c:	2101      	movs	r1, #1
 800305e:	438a      	bics	r2, r1
 8003060:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003062:	f7fd fe35 	bl	8000cd0 <HAL_GetTick>
 8003066:	0003      	movs	r3, r0
 8003068:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800306c:	f7fd fe30 	bl	8000cd0 <HAL_GetTick>
 8003070:	0002      	movs	r2, r0
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e236      	b.n	80034ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800307e:	4b29      	ldr	r3, [pc, #164]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	2202      	movs	r2, #2
 8003084:	4013      	ands	r3, r2
 8003086:	d1f1      	bne.n	800306c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2204      	movs	r2, #4
 800308e:	4013      	ands	r3, r2
 8003090:	d100      	bne.n	8003094 <HAL_RCC_OscConfig+0x2a8>
 8003092:	e0b5      	b.n	8003200 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003094:	201f      	movs	r0, #31
 8003096:	183b      	adds	r3, r7, r0
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309c:	4b21      	ldr	r3, [pc, #132]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 800309e:	69da      	ldr	r2, [r3, #28]
 80030a0:	2380      	movs	r3, #128	; 0x80
 80030a2:	055b      	lsls	r3, r3, #21
 80030a4:	4013      	ands	r3, r2
 80030a6:	d110      	bne.n	80030ca <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a8:	4b1e      	ldr	r3, [pc, #120]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 80030aa:	69da      	ldr	r2, [r3, #28]
 80030ac:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 80030ae:	2180      	movs	r1, #128	; 0x80
 80030b0:	0549      	lsls	r1, r1, #21
 80030b2:	430a      	orrs	r2, r1
 80030b4:	61da      	str	r2, [r3, #28]
 80030b6:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 80030b8:	69da      	ldr	r2, [r3, #28]
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	055b      	lsls	r3, r3, #21
 80030be:	4013      	ands	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80030c4:	183b      	adds	r3, r7, r0
 80030c6:	2201      	movs	r2, #1
 80030c8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ca:	4b19      	ldr	r3, [pc, #100]	; (8003130 <HAL_RCC_OscConfig+0x344>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	2380      	movs	r3, #128	; 0x80
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4013      	ands	r3, r2
 80030d4:	d11a      	bne.n	800310c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d6:	4b16      	ldr	r3, [pc, #88]	; (8003130 <HAL_RCC_OscConfig+0x344>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	4b15      	ldr	r3, [pc, #84]	; (8003130 <HAL_RCC_OscConfig+0x344>)
 80030dc:	2180      	movs	r1, #128	; 0x80
 80030de:	0049      	lsls	r1, r1, #1
 80030e0:	430a      	orrs	r2, r1
 80030e2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030e4:	f7fd fdf4 	bl	8000cd0 <HAL_GetTick>
 80030e8:	0003      	movs	r3, r0
 80030ea:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ee:	f7fd fdef 	bl	8000cd0 <HAL_GetTick>
 80030f2:	0002      	movs	r2, r0
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b64      	cmp	r3, #100	; 0x64
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e1f5      	b.n	80034ec <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_RCC_OscConfig+0x344>)
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	4013      	ands	r3, r2
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d10f      	bne.n	8003134 <HAL_RCC_OscConfig+0x348>
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 8003116:	6a1a      	ldr	r2, [r3, #32]
 8003118:	4b02      	ldr	r3, [pc, #8]	; (8003124 <HAL_RCC_OscConfig+0x338>)
 800311a:	2101      	movs	r1, #1
 800311c:	430a      	orrs	r2, r1
 800311e:	621a      	str	r2, [r3, #32]
 8003120:	e036      	b.n	8003190 <HAL_RCC_OscConfig+0x3a4>
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	40021000 	.word	0x40021000
 8003128:	fffeffff 	.word	0xfffeffff
 800312c:	fffbffff 	.word	0xfffbffff
 8003130:	40007000 	.word	0x40007000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10c      	bne.n	8003156 <HAL_RCC_OscConfig+0x36a>
 800313c:	4bca      	ldr	r3, [pc, #808]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 800313e:	6a1a      	ldr	r2, [r3, #32]
 8003140:	4bc9      	ldr	r3, [pc, #804]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003142:	2101      	movs	r1, #1
 8003144:	438a      	bics	r2, r1
 8003146:	621a      	str	r2, [r3, #32]
 8003148:	4bc7      	ldr	r3, [pc, #796]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 800314a:	6a1a      	ldr	r2, [r3, #32]
 800314c:	4bc6      	ldr	r3, [pc, #792]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 800314e:	2104      	movs	r1, #4
 8003150:	438a      	bics	r2, r1
 8003152:	621a      	str	r2, [r3, #32]
 8003154:	e01c      	b.n	8003190 <HAL_RCC_OscConfig+0x3a4>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b05      	cmp	r3, #5
 800315c:	d10c      	bne.n	8003178 <HAL_RCC_OscConfig+0x38c>
 800315e:	4bc2      	ldr	r3, [pc, #776]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003160:	6a1a      	ldr	r2, [r3, #32]
 8003162:	4bc1      	ldr	r3, [pc, #772]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003164:	2104      	movs	r1, #4
 8003166:	430a      	orrs	r2, r1
 8003168:	621a      	str	r2, [r3, #32]
 800316a:	4bbf      	ldr	r3, [pc, #764]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 800316c:	6a1a      	ldr	r2, [r3, #32]
 800316e:	4bbe      	ldr	r3, [pc, #760]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003170:	2101      	movs	r1, #1
 8003172:	430a      	orrs	r2, r1
 8003174:	621a      	str	r2, [r3, #32]
 8003176:	e00b      	b.n	8003190 <HAL_RCC_OscConfig+0x3a4>
 8003178:	4bbb      	ldr	r3, [pc, #748]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 800317a:	6a1a      	ldr	r2, [r3, #32]
 800317c:	4bba      	ldr	r3, [pc, #744]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 800317e:	2101      	movs	r1, #1
 8003180:	438a      	bics	r2, r1
 8003182:	621a      	str	r2, [r3, #32]
 8003184:	4bb8      	ldr	r3, [pc, #736]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003186:	6a1a      	ldr	r2, [r3, #32]
 8003188:	4bb7      	ldr	r3, [pc, #732]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 800318a:	2104      	movs	r1, #4
 800318c:	438a      	bics	r2, r1
 800318e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d014      	beq.n	80031c2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003198:	f7fd fd9a 	bl	8000cd0 <HAL_GetTick>
 800319c:	0003      	movs	r3, r0
 800319e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a0:	e009      	b.n	80031b6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a2:	f7fd fd95 	bl	8000cd0 <HAL_GetTick>
 80031a6:	0002      	movs	r2, r0
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	4aaf      	ldr	r2, [pc, #700]	; (800346c <HAL_RCC_OscConfig+0x680>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e19a      	b.n	80034ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b6:	4bac      	ldr	r3, [pc, #688]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	2202      	movs	r2, #2
 80031bc:	4013      	ands	r3, r2
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x3b6>
 80031c0:	e013      	b.n	80031ea <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c2:	f7fd fd85 	bl	8000cd0 <HAL_GetTick>
 80031c6:	0003      	movs	r3, r0
 80031c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ca:	e009      	b.n	80031e0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031cc:	f7fd fd80 	bl	8000cd0 <HAL_GetTick>
 80031d0:	0002      	movs	r2, r0
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	4aa5      	ldr	r2, [pc, #660]	; (800346c <HAL_RCC_OscConfig+0x680>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e185      	b.n	80034ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e0:	4ba1      	ldr	r3, [pc, #644]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	2202      	movs	r2, #2
 80031e6:	4013      	ands	r3, r2
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031ea:	231f      	movs	r3, #31
 80031ec:	18fb      	adds	r3, r7, r3
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d105      	bne.n	8003200 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f4:	4b9c      	ldr	r3, [pc, #624]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	4b9b      	ldr	r3, [pc, #620]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 80031fa:	499d      	ldr	r1, [pc, #628]	; (8003470 <HAL_RCC_OscConfig+0x684>)
 80031fc:	400a      	ands	r2, r1
 80031fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2210      	movs	r2, #16
 8003206:	4013      	ands	r3, r2
 8003208:	d063      	beq.n	80032d2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d12a      	bne.n	8003268 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003212:	4b95      	ldr	r3, [pc, #596]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003216:	4b94      	ldr	r3, [pc, #592]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003218:	2104      	movs	r1, #4
 800321a:	430a      	orrs	r2, r1
 800321c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800321e:	4b92      	ldr	r3, [pc, #584]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003222:	4b91      	ldr	r3, [pc, #580]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003224:	2101      	movs	r1, #1
 8003226:	430a      	orrs	r2, r1
 8003228:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322a:	f7fd fd51 	bl	8000cd0 <HAL_GetTick>
 800322e:	0003      	movs	r3, r0
 8003230:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003234:	f7fd fd4c 	bl	8000cd0 <HAL_GetTick>
 8003238:	0002      	movs	r2, r0
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e152      	b.n	80034ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003246:	4b88      	ldr	r3, [pc, #544]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324a:	2202      	movs	r2, #2
 800324c:	4013      	ands	r3, r2
 800324e:	d0f1      	beq.n	8003234 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003250:	4b85      	ldr	r3, [pc, #532]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003254:	22f8      	movs	r2, #248	; 0xf8
 8003256:	4393      	bics	r3, r2
 8003258:	0019      	movs	r1, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	00da      	lsls	r2, r3, #3
 8003260:	4b81      	ldr	r3, [pc, #516]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003262:	430a      	orrs	r2, r1
 8003264:	635a      	str	r2, [r3, #52]	; 0x34
 8003266:	e034      	b.n	80032d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	3305      	adds	r3, #5
 800326e:	d111      	bne.n	8003294 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003270:	4b7d      	ldr	r3, [pc, #500]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003274:	4b7c      	ldr	r3, [pc, #496]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003276:	2104      	movs	r1, #4
 8003278:	438a      	bics	r2, r1
 800327a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800327c:	4b7a      	ldr	r3, [pc, #488]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 800327e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003280:	22f8      	movs	r2, #248	; 0xf8
 8003282:	4393      	bics	r3, r2
 8003284:	0019      	movs	r1, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	00da      	lsls	r2, r3, #3
 800328c:	4b76      	ldr	r3, [pc, #472]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 800328e:	430a      	orrs	r2, r1
 8003290:	635a      	str	r2, [r3, #52]	; 0x34
 8003292:	e01e      	b.n	80032d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003294:	4b74      	ldr	r3, [pc, #464]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003298:	4b73      	ldr	r3, [pc, #460]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 800329a:	2104      	movs	r1, #4
 800329c:	430a      	orrs	r2, r1
 800329e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80032a0:	4b71      	ldr	r3, [pc, #452]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 80032a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032a4:	4b70      	ldr	r3, [pc, #448]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 80032a6:	2101      	movs	r1, #1
 80032a8:	438a      	bics	r2, r1
 80032aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ac:	f7fd fd10 	bl	8000cd0 <HAL_GetTick>
 80032b0:	0003      	movs	r3, r0
 80032b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80032b6:	f7fd fd0b 	bl	8000cd0 <HAL_GetTick>
 80032ba:	0002      	movs	r2, r0
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e111      	b.n	80034ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80032c8:	4b67      	ldr	r3, [pc, #412]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 80032ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032cc:	2202      	movs	r2, #2
 80032ce:	4013      	ands	r3, r2
 80032d0:	d1f1      	bne.n	80032b6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2220      	movs	r2, #32
 80032d8:	4013      	ands	r3, r2
 80032da:	d05c      	beq.n	8003396 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80032dc:	4b62      	ldr	r3, [pc, #392]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	220c      	movs	r2, #12
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b0c      	cmp	r3, #12
 80032e6:	d00e      	beq.n	8003306 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80032e8:	4b5f      	ldr	r3, [pc, #380]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	220c      	movs	r2, #12
 80032ee:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d114      	bne.n	800331e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80032f4:	4b5c      	ldr	r3, [pc, #368]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	23c0      	movs	r3, #192	; 0xc0
 80032fa:	025b      	lsls	r3, r3, #9
 80032fc:	401a      	ands	r2, r3
 80032fe:	23c0      	movs	r3, #192	; 0xc0
 8003300:	025b      	lsls	r3, r3, #9
 8003302:	429a      	cmp	r2, r3
 8003304:	d10b      	bne.n	800331e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003306:	4b58      	ldr	r3, [pc, #352]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	025b      	lsls	r3, r3, #9
 800330e:	4013      	ands	r3, r2
 8003310:	d040      	beq.n	8003394 <HAL_RCC_OscConfig+0x5a8>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d03c      	beq.n	8003394 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e0e6      	b.n	80034ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d01b      	beq.n	800335e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003326:	4b50      	ldr	r3, [pc, #320]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800332a:	4b4f      	ldr	r3, [pc, #316]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 800332c:	2180      	movs	r1, #128	; 0x80
 800332e:	0249      	lsls	r1, r1, #9
 8003330:	430a      	orrs	r2, r1
 8003332:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003334:	f7fd fccc 	bl	8000cd0 <HAL_GetTick>
 8003338:	0003      	movs	r3, r0
 800333a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800333e:	f7fd fcc7 	bl	8000cd0 <HAL_GetTick>
 8003342:	0002      	movs	r2, r0
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e0cd      	b.n	80034ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003350:	4b45      	ldr	r3, [pc, #276]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003354:	2380      	movs	r3, #128	; 0x80
 8003356:	025b      	lsls	r3, r3, #9
 8003358:	4013      	ands	r3, r2
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x552>
 800335c:	e01b      	b.n	8003396 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800335e:	4b42      	ldr	r3, [pc, #264]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003362:	4b41      	ldr	r3, [pc, #260]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003364:	4943      	ldr	r1, [pc, #268]	; (8003474 <HAL_RCC_OscConfig+0x688>)
 8003366:	400a      	ands	r2, r1
 8003368:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336a:	f7fd fcb1 	bl	8000cd0 <HAL_GetTick>
 800336e:	0003      	movs	r3, r0
 8003370:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003374:	f7fd fcac 	bl	8000cd0 <HAL_GetTick>
 8003378:	0002      	movs	r2, r0
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e0b2      	b.n	80034ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003386:	4b38      	ldr	r3, [pc, #224]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338a:	2380      	movs	r3, #128	; 0x80
 800338c:	025b      	lsls	r3, r3, #9
 800338e:	4013      	ands	r3, r2
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x588>
 8003392:	e000      	b.n	8003396 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003394:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	2b00      	cmp	r3, #0
 800339c:	d100      	bne.n	80033a0 <HAL_RCC_OscConfig+0x5b4>
 800339e:	e0a4      	b.n	80034ea <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033a0:	4b31      	ldr	r3, [pc, #196]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	220c      	movs	r2, #12
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d100      	bne.n	80033ae <HAL_RCC_OscConfig+0x5c2>
 80033ac:	e078      	b.n	80034a0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d14c      	bne.n	8003450 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b6:	4b2c      	ldr	r3, [pc, #176]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	4b2b      	ldr	r3, [pc, #172]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 80033bc:	492e      	ldr	r1, [pc, #184]	; (8003478 <HAL_RCC_OscConfig+0x68c>)
 80033be:	400a      	ands	r2, r1
 80033c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c2:	f7fd fc85 	bl	8000cd0 <HAL_GetTick>
 80033c6:	0003      	movs	r3, r0
 80033c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033cc:	f7fd fc80 	bl	8000cd0 <HAL_GetTick>
 80033d0:	0002      	movs	r2, r0
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e086      	b.n	80034ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033de:	4b22      	ldr	r3, [pc, #136]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	049b      	lsls	r3, r3, #18
 80033e6:	4013      	ands	r3, r2
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ea:	4b1f      	ldr	r3, [pc, #124]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	220f      	movs	r2, #15
 80033f0:	4393      	bics	r3, r2
 80033f2:	0019      	movs	r1, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033f8:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 80033fa:	430a      	orrs	r2, r1
 80033fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80033fe:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4a1e      	ldr	r2, [pc, #120]	; (800347c <HAL_RCC_OscConfig+0x690>)
 8003404:	4013      	ands	r3, r2
 8003406:	0019      	movs	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003410:	431a      	orrs	r2, r3
 8003412:	4b15      	ldr	r3, [pc, #84]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003414:	430a      	orrs	r2, r1
 8003416:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003418:	4b13      	ldr	r3, [pc, #76]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	4b12      	ldr	r3, [pc, #72]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 800341e:	2180      	movs	r1, #128	; 0x80
 8003420:	0449      	lsls	r1, r1, #17
 8003422:	430a      	orrs	r2, r1
 8003424:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7fd fc53 	bl	8000cd0 <HAL_GetTick>
 800342a:	0003      	movs	r3, r0
 800342c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003430:	f7fd fc4e 	bl	8000cd0 <HAL_GetTick>
 8003434:	0002      	movs	r2, r0
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e054      	b.n	80034ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003442:	4b09      	ldr	r3, [pc, #36]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	2380      	movs	r3, #128	; 0x80
 8003448:	049b      	lsls	r3, r3, #18
 800344a:	4013      	ands	r3, r2
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0x644>
 800344e:	e04c      	b.n	80034ea <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4b04      	ldr	r3, [pc, #16]	; (8003468 <HAL_RCC_OscConfig+0x67c>)
 8003456:	4908      	ldr	r1, [pc, #32]	; (8003478 <HAL_RCC_OscConfig+0x68c>)
 8003458:	400a      	ands	r2, r1
 800345a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345c:	f7fd fc38 	bl	8000cd0 <HAL_GetTick>
 8003460:	0003      	movs	r3, r0
 8003462:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003464:	e015      	b.n	8003492 <HAL_RCC_OscConfig+0x6a6>
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	40021000 	.word	0x40021000
 800346c:	00001388 	.word	0x00001388
 8003470:	efffffff 	.word	0xefffffff
 8003474:	fffeffff 	.word	0xfffeffff
 8003478:	feffffff 	.word	0xfeffffff
 800347c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003480:	f7fd fc26 	bl	8000cd0 <HAL_GetTick>
 8003484:	0002      	movs	r2, r0
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e02c      	b.n	80034ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003492:	4b18      	ldr	r3, [pc, #96]	; (80034f4 <HAL_RCC_OscConfig+0x708>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	049b      	lsls	r3, r3, #18
 800349a:	4013      	ands	r3, r2
 800349c:	d1f0      	bne.n	8003480 <HAL_RCC_OscConfig+0x694>
 800349e:	e024      	b.n	80034ea <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e01f      	b.n	80034ec <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80034ac:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <HAL_RCC_OscConfig+0x708>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80034b2:	4b10      	ldr	r3, [pc, #64]	; (80034f4 <HAL_RCC_OscConfig+0x708>)
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	23c0      	movs	r3, #192	; 0xc0
 80034bc:	025b      	lsls	r3, r3, #9
 80034be:	401a      	ands	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d10e      	bne.n	80034e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	220f      	movs	r2, #15
 80034cc:	401a      	ands	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d107      	bne.n	80034e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	23f0      	movs	r3, #240	; 0xf0
 80034da:	039b      	lsls	r3, r3, #14
 80034dc:	401a      	ands	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d001      	beq.n	80034ea <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	0018      	movs	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b008      	add	sp, #32
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40021000 	.word	0x40021000

080034f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0bf      	b.n	800368c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800350c:	4b61      	ldr	r3, [pc, #388]	; (8003694 <HAL_RCC_ClockConfig+0x19c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2201      	movs	r2, #1
 8003512:	4013      	ands	r3, r2
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d911      	bls.n	800353e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351a:	4b5e      	ldr	r3, [pc, #376]	; (8003694 <HAL_RCC_ClockConfig+0x19c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2201      	movs	r2, #1
 8003520:	4393      	bics	r3, r2
 8003522:	0019      	movs	r1, r3
 8003524:	4b5b      	ldr	r3, [pc, #364]	; (8003694 <HAL_RCC_ClockConfig+0x19c>)
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800352c:	4b59      	ldr	r3, [pc, #356]	; (8003694 <HAL_RCC_ClockConfig+0x19c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2201      	movs	r2, #1
 8003532:	4013      	ands	r3, r2
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d001      	beq.n	800353e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e0a6      	b.n	800368c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2202      	movs	r2, #2
 8003544:	4013      	ands	r3, r2
 8003546:	d015      	beq.n	8003574 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2204      	movs	r2, #4
 800354e:	4013      	ands	r3, r2
 8003550:	d006      	beq.n	8003560 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003552:	4b51      	ldr	r3, [pc, #324]	; (8003698 <HAL_RCC_ClockConfig+0x1a0>)
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	4b50      	ldr	r3, [pc, #320]	; (8003698 <HAL_RCC_ClockConfig+0x1a0>)
 8003558:	21e0      	movs	r1, #224	; 0xe0
 800355a:	00c9      	lsls	r1, r1, #3
 800355c:	430a      	orrs	r2, r1
 800355e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003560:	4b4d      	ldr	r3, [pc, #308]	; (8003698 <HAL_RCC_ClockConfig+0x1a0>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	22f0      	movs	r2, #240	; 0xf0
 8003566:	4393      	bics	r3, r2
 8003568:	0019      	movs	r1, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	4b4a      	ldr	r3, [pc, #296]	; (8003698 <HAL_RCC_ClockConfig+0x1a0>)
 8003570:	430a      	orrs	r2, r1
 8003572:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2201      	movs	r2, #1
 800357a:	4013      	ands	r3, r2
 800357c:	d04c      	beq.n	8003618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d107      	bne.n	8003596 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003586:	4b44      	ldr	r3, [pc, #272]	; (8003698 <HAL_RCC_ClockConfig+0x1a0>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	029b      	lsls	r3, r3, #10
 800358e:	4013      	ands	r3, r2
 8003590:	d120      	bne.n	80035d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e07a      	b.n	800368c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d107      	bne.n	80035ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359e:	4b3e      	ldr	r3, [pc, #248]	; (8003698 <HAL_RCC_ClockConfig+0x1a0>)
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	049b      	lsls	r3, r3, #18
 80035a6:	4013      	ands	r3, r2
 80035a8:	d114      	bne.n	80035d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e06e      	b.n	800368c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d107      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80035b6:	4b38      	ldr	r3, [pc, #224]	; (8003698 <HAL_RCC_ClockConfig+0x1a0>)
 80035b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ba:	2380      	movs	r3, #128	; 0x80
 80035bc:	025b      	lsls	r3, r3, #9
 80035be:	4013      	ands	r3, r2
 80035c0:	d108      	bne.n	80035d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e062      	b.n	800368c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c6:	4b34      	ldr	r3, [pc, #208]	; (8003698 <HAL_RCC_ClockConfig+0x1a0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2202      	movs	r2, #2
 80035cc:	4013      	ands	r3, r2
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e05b      	b.n	800368c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035d4:	4b30      	ldr	r3, [pc, #192]	; (8003698 <HAL_RCC_ClockConfig+0x1a0>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2203      	movs	r2, #3
 80035da:	4393      	bics	r3, r2
 80035dc:	0019      	movs	r1, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	4b2d      	ldr	r3, [pc, #180]	; (8003698 <HAL_RCC_ClockConfig+0x1a0>)
 80035e4:	430a      	orrs	r2, r1
 80035e6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035e8:	f7fd fb72 	bl	8000cd0 <HAL_GetTick>
 80035ec:	0003      	movs	r3, r0
 80035ee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f0:	e009      	b.n	8003606 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f2:	f7fd fb6d 	bl	8000cd0 <HAL_GetTick>
 80035f6:	0002      	movs	r2, r0
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	4a27      	ldr	r2, [pc, #156]	; (800369c <HAL_RCC_ClockConfig+0x1a4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e042      	b.n	800368c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	4b24      	ldr	r3, [pc, #144]	; (8003698 <HAL_RCC_ClockConfig+0x1a0>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	220c      	movs	r2, #12
 800360c:	401a      	ands	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	429a      	cmp	r2, r3
 8003616:	d1ec      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003618:	4b1e      	ldr	r3, [pc, #120]	; (8003694 <HAL_RCC_ClockConfig+0x19c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2201      	movs	r2, #1
 800361e:	4013      	ands	r3, r2
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d211      	bcs.n	800364a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003626:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <HAL_RCC_ClockConfig+0x19c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2201      	movs	r2, #1
 800362c:	4393      	bics	r3, r2
 800362e:	0019      	movs	r1, r3
 8003630:	4b18      	ldr	r3, [pc, #96]	; (8003694 <HAL_RCC_ClockConfig+0x19c>)
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003638:	4b16      	ldr	r3, [pc, #88]	; (8003694 <HAL_RCC_ClockConfig+0x19c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2201      	movs	r2, #1
 800363e:	4013      	ands	r3, r2
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d001      	beq.n	800364a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e020      	b.n	800368c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2204      	movs	r2, #4
 8003650:	4013      	ands	r3, r2
 8003652:	d009      	beq.n	8003668 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003654:	4b10      	ldr	r3, [pc, #64]	; (8003698 <HAL_RCC_ClockConfig+0x1a0>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	4a11      	ldr	r2, [pc, #68]	; (80036a0 <HAL_RCC_ClockConfig+0x1a8>)
 800365a:	4013      	ands	r3, r2
 800365c:	0019      	movs	r1, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <HAL_RCC_ClockConfig+0x1a0>)
 8003664:	430a      	orrs	r2, r1
 8003666:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003668:	f000 f820 	bl	80036ac <HAL_RCC_GetSysClockFreq>
 800366c:	0001      	movs	r1, r0
 800366e:	4b0a      	ldr	r3, [pc, #40]	; (8003698 <HAL_RCC_ClockConfig+0x1a0>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	220f      	movs	r2, #15
 8003676:	4013      	ands	r3, r2
 8003678:	4a0a      	ldr	r2, [pc, #40]	; (80036a4 <HAL_RCC_ClockConfig+0x1ac>)
 800367a:	5cd3      	ldrb	r3, [r2, r3]
 800367c:	000a      	movs	r2, r1
 800367e:	40da      	lsrs	r2, r3
 8003680:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <HAL_RCC_ClockConfig+0x1b0>)
 8003682:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003684:	2000      	movs	r0, #0
 8003686:	f7fd fadd 	bl	8000c44 <HAL_InitTick>
  
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	0018      	movs	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	b004      	add	sp, #16
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40022000 	.word	0x40022000
 8003698:	40021000 	.word	0x40021000
 800369c:	00001388 	.word	0x00001388
 80036a0:	fffff8ff 	.word	0xfffff8ff
 80036a4:	080044c8 	.word	0x080044c8
 80036a8:	20000000 	.word	0x20000000

080036ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036ac:	b590      	push	{r4, r7, lr}
 80036ae:	b08f      	sub	sp, #60	; 0x3c
 80036b0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80036b2:	2314      	movs	r3, #20
 80036b4:	18fb      	adds	r3, r7, r3
 80036b6:	4a38      	ldr	r2, [pc, #224]	; (8003798 <HAL_RCC_GetSysClockFreq+0xec>)
 80036b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80036ba:	c313      	stmia	r3!, {r0, r1, r4}
 80036bc:	6812      	ldr	r2, [r2, #0]
 80036be:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80036c0:	1d3b      	adds	r3, r7, #4
 80036c2:	4a36      	ldr	r2, [pc, #216]	; (800379c <HAL_RCC_GetSysClockFreq+0xf0>)
 80036c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80036c6:	c313      	stmia	r3!, {r0, r1, r4}
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036d0:	2300      	movs	r3, #0
 80036d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80036d4:	2300      	movs	r3, #0
 80036d6:	637b      	str	r3, [r7, #52]	; 0x34
 80036d8:	2300      	movs	r3, #0
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80036e0:	4b2f      	ldr	r3, [pc, #188]	; (80037a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e8:	220c      	movs	r2, #12
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b0c      	cmp	r3, #12
 80036ee:	d047      	beq.n	8003780 <HAL_RCC_GetSysClockFreq+0xd4>
 80036f0:	d849      	bhi.n	8003786 <HAL_RCC_GetSysClockFreq+0xda>
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d002      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0x50>
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d003      	beq.n	8003702 <HAL_RCC_GetSysClockFreq+0x56>
 80036fa:	e044      	b.n	8003786 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036fc:	4b29      	ldr	r3, [pc, #164]	; (80037a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003700:	e044      	b.n	800378c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003704:	0c9b      	lsrs	r3, r3, #18
 8003706:	220f      	movs	r2, #15
 8003708:	4013      	ands	r3, r2
 800370a:	2214      	movs	r2, #20
 800370c:	18ba      	adds	r2, r7, r2
 800370e:	5cd3      	ldrb	r3, [r2, r3]
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003712:	4b23      	ldr	r3, [pc, #140]	; (80037a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003716:	220f      	movs	r2, #15
 8003718:	4013      	ands	r3, r2
 800371a:	1d3a      	adds	r2, r7, #4
 800371c:	5cd3      	ldrb	r3, [r2, r3]
 800371e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003722:	23c0      	movs	r3, #192	; 0xc0
 8003724:	025b      	lsls	r3, r3, #9
 8003726:	401a      	ands	r2, r3
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	025b      	lsls	r3, r3, #9
 800372c:	429a      	cmp	r2, r3
 800372e:	d109      	bne.n	8003744 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003732:	481c      	ldr	r0, [pc, #112]	; (80037a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003734:	f7fc fce8 	bl	8000108 <__udivsi3>
 8003738:	0003      	movs	r3, r0
 800373a:	001a      	movs	r2, r3
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	4353      	muls	r3, r2
 8003740:	637b      	str	r3, [r7, #52]	; 0x34
 8003742:	e01a      	b.n	800377a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003746:	23c0      	movs	r3, #192	; 0xc0
 8003748:	025b      	lsls	r3, r3, #9
 800374a:	401a      	ands	r2, r3
 800374c:	23c0      	movs	r3, #192	; 0xc0
 800374e:	025b      	lsls	r3, r3, #9
 8003750:	429a      	cmp	r2, r3
 8003752:	d109      	bne.n	8003768 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003756:	4814      	ldr	r0, [pc, #80]	; (80037a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003758:	f7fc fcd6 	bl	8000108 <__udivsi3>
 800375c:	0003      	movs	r3, r0
 800375e:	001a      	movs	r2, r3
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	4353      	muls	r3, r2
 8003764:	637b      	str	r3, [r7, #52]	; 0x34
 8003766:	e008      	b.n	800377a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800376a:	480e      	ldr	r0, [pc, #56]	; (80037a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800376c:	f7fc fccc 	bl	8000108 <__udivsi3>
 8003770:	0003      	movs	r3, r0
 8003772:	001a      	movs	r2, r3
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	4353      	muls	r3, r2
 8003778:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800377a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800377e:	e005      	b.n	800378c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003780:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003782:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003784:	e002      	b.n	800378c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003786:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003788:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800378a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800378e:	0018      	movs	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	b00f      	add	sp, #60	; 0x3c
 8003794:	bd90      	pop	{r4, r7, pc}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	080044a8 	.word	0x080044a8
 800379c:	080044b8 	.word	0x080044b8
 80037a0:	40021000 	.word	0x40021000
 80037a4:	007a1200 	.word	0x007a1200
 80037a8:	02dc6c00 	.word	0x02dc6c00

080037ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e042      	b.n	8003844 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	223d      	movs	r2, #61	; 0x3d
 80037c2:	5c9b      	ldrb	r3, [r3, r2]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d107      	bne.n	80037da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	223c      	movs	r2, #60	; 0x3c
 80037ce:	2100      	movs	r1, #0
 80037d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	0018      	movs	r0, r3
 80037d6:	f7fd f94b 	bl	8000a70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	223d      	movs	r2, #61	; 0x3d
 80037de:	2102      	movs	r1, #2
 80037e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3304      	adds	r3, #4
 80037ea:	0019      	movs	r1, r3
 80037ec:	0010      	movs	r0, r2
 80037ee:	f000 fab7 	bl	8003d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2246      	movs	r2, #70	; 0x46
 80037f6:	2101      	movs	r1, #1
 80037f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	223e      	movs	r2, #62	; 0x3e
 80037fe:	2101      	movs	r1, #1
 8003800:	5499      	strb	r1, [r3, r2]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	223f      	movs	r2, #63	; 0x3f
 8003806:	2101      	movs	r1, #1
 8003808:	5499      	strb	r1, [r3, r2]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2240      	movs	r2, #64	; 0x40
 800380e:	2101      	movs	r1, #1
 8003810:	5499      	strb	r1, [r3, r2]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2241      	movs	r2, #65	; 0x41
 8003816:	2101      	movs	r1, #1
 8003818:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2242      	movs	r2, #66	; 0x42
 800381e:	2101      	movs	r1, #1
 8003820:	5499      	strb	r1, [r3, r2]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2243      	movs	r2, #67	; 0x43
 8003826:	2101      	movs	r1, #1
 8003828:	5499      	strb	r1, [r3, r2]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2244      	movs	r2, #68	; 0x44
 800382e:	2101      	movs	r1, #1
 8003830:	5499      	strb	r1, [r3, r2]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2245      	movs	r2, #69	; 0x45
 8003836:	2101      	movs	r1, #1
 8003838:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	223d      	movs	r2, #61	; 0x3d
 800383e:	2101      	movs	r1, #1
 8003840:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	0018      	movs	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	b002      	add	sp, #8
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e042      	b.n	80038e4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	223d      	movs	r2, #61	; 0x3d
 8003862:	5c9b      	ldrb	r3, [r3, r2]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d107      	bne.n	800387a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	223c      	movs	r2, #60	; 0x3c
 800386e:	2100      	movs	r1, #0
 8003870:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	0018      	movs	r0, r3
 8003876:	f000 f839 	bl	80038ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	223d      	movs	r2, #61	; 0x3d
 800387e:	2102      	movs	r1, #2
 8003880:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3304      	adds	r3, #4
 800388a:	0019      	movs	r1, r3
 800388c:	0010      	movs	r0, r2
 800388e:	f000 fa67 	bl	8003d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2246      	movs	r2, #70	; 0x46
 8003896:	2101      	movs	r1, #1
 8003898:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	223e      	movs	r2, #62	; 0x3e
 800389e:	2101      	movs	r1, #1
 80038a0:	5499      	strb	r1, [r3, r2]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	223f      	movs	r2, #63	; 0x3f
 80038a6:	2101      	movs	r1, #1
 80038a8:	5499      	strb	r1, [r3, r2]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2240      	movs	r2, #64	; 0x40
 80038ae:	2101      	movs	r1, #1
 80038b0:	5499      	strb	r1, [r3, r2]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2241      	movs	r2, #65	; 0x41
 80038b6:	2101      	movs	r1, #1
 80038b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2242      	movs	r2, #66	; 0x42
 80038be:	2101      	movs	r1, #1
 80038c0:	5499      	strb	r1, [r3, r2]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2243      	movs	r2, #67	; 0x43
 80038c6:	2101      	movs	r1, #1
 80038c8:	5499      	strb	r1, [r3, r2]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2244      	movs	r2, #68	; 0x44
 80038ce:	2101      	movs	r1, #1
 80038d0:	5499      	strb	r1, [r3, r2]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2245      	movs	r2, #69	; 0x45
 80038d6:	2101      	movs	r1, #1
 80038d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	223d      	movs	r2, #61	; 0x3d
 80038de:	2101      	movs	r1, #1
 80038e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	0018      	movs	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b002      	add	sp, #8
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038f4:	46c0      	nop			; (mov r8, r8)
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b002      	add	sp, #8
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d108      	bne.n	800391e <HAL_TIM_PWM_Start+0x22>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	223e      	movs	r2, #62	; 0x3e
 8003910:	5c9b      	ldrb	r3, [r3, r2]
 8003912:	b2db      	uxtb	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	1e5a      	subs	r2, r3, #1
 8003918:	4193      	sbcs	r3, r2
 800391a:	b2db      	uxtb	r3, r3
 800391c:	e01f      	b.n	800395e <HAL_TIM_PWM_Start+0x62>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b04      	cmp	r3, #4
 8003922:	d108      	bne.n	8003936 <HAL_TIM_PWM_Start+0x3a>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	223f      	movs	r2, #63	; 0x3f
 8003928:	5c9b      	ldrb	r3, [r3, r2]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	1e5a      	subs	r2, r3, #1
 8003930:	4193      	sbcs	r3, r2
 8003932:	b2db      	uxtb	r3, r3
 8003934:	e013      	b.n	800395e <HAL_TIM_PWM_Start+0x62>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b08      	cmp	r3, #8
 800393a:	d108      	bne.n	800394e <HAL_TIM_PWM_Start+0x52>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2240      	movs	r2, #64	; 0x40
 8003940:	5c9b      	ldrb	r3, [r3, r2]
 8003942:	b2db      	uxtb	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	1e5a      	subs	r2, r3, #1
 8003948:	4193      	sbcs	r3, r2
 800394a:	b2db      	uxtb	r3, r3
 800394c:	e007      	b.n	800395e <HAL_TIM_PWM_Start+0x62>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2241      	movs	r2, #65	; 0x41
 8003952:	5c9b      	ldrb	r3, [r3, r2]
 8003954:	b2db      	uxtb	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	1e5a      	subs	r2, r3, #1
 800395a:	4193      	sbcs	r3, r2
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e06a      	b.n	8003a3c <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d104      	bne.n	8003976 <HAL_TIM_PWM_Start+0x7a>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	223e      	movs	r2, #62	; 0x3e
 8003970:	2102      	movs	r1, #2
 8003972:	5499      	strb	r1, [r3, r2]
 8003974:	e013      	b.n	800399e <HAL_TIM_PWM_Start+0xa2>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b04      	cmp	r3, #4
 800397a:	d104      	bne.n	8003986 <HAL_TIM_PWM_Start+0x8a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	223f      	movs	r2, #63	; 0x3f
 8003980:	2102      	movs	r1, #2
 8003982:	5499      	strb	r1, [r3, r2]
 8003984:	e00b      	b.n	800399e <HAL_TIM_PWM_Start+0xa2>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b08      	cmp	r3, #8
 800398a:	d104      	bne.n	8003996 <HAL_TIM_PWM_Start+0x9a>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2240      	movs	r2, #64	; 0x40
 8003990:	2102      	movs	r1, #2
 8003992:	5499      	strb	r1, [r3, r2]
 8003994:	e003      	b.n	800399e <HAL_TIM_PWM_Start+0xa2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2241      	movs	r2, #65	; 0x41
 800399a:	2102      	movs	r1, #2
 800399c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6839      	ldr	r1, [r7, #0]
 80039a4:	2201      	movs	r2, #1
 80039a6:	0018      	movs	r0, r3
 80039a8:	f000 fcca 	bl	8004340 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a24      	ldr	r2, [pc, #144]	; (8003a44 <HAL_TIM_PWM_Start+0x148>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d009      	beq.n	80039ca <HAL_TIM_PWM_Start+0xce>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a23      	ldr	r2, [pc, #140]	; (8003a48 <HAL_TIM_PWM_Start+0x14c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d004      	beq.n	80039ca <HAL_TIM_PWM_Start+0xce>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a21      	ldr	r2, [pc, #132]	; (8003a4c <HAL_TIM_PWM_Start+0x150>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d101      	bne.n	80039ce <HAL_TIM_PWM_Start+0xd2>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <HAL_TIM_PWM_Start+0xd4>
 80039ce:	2300      	movs	r3, #0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2180      	movs	r1, #128	; 0x80
 80039e0:	0209      	lsls	r1, r1, #8
 80039e2:	430a      	orrs	r2, r1
 80039e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a16      	ldr	r2, [pc, #88]	; (8003a44 <HAL_TIM_PWM_Start+0x148>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00a      	beq.n	8003a06 <HAL_TIM_PWM_Start+0x10a>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	2380      	movs	r3, #128	; 0x80
 80039f6:	05db      	lsls	r3, r3, #23
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d004      	beq.n	8003a06 <HAL_TIM_PWM_Start+0x10a>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a13      	ldr	r2, [pc, #76]	; (8003a50 <HAL_TIM_PWM_Start+0x154>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d111      	bne.n	8003a2a <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2207      	movs	r2, #7
 8003a0e:	4013      	ands	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b06      	cmp	r3, #6
 8003a16:	d010      	beq.n	8003a3a <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2101      	movs	r1, #1
 8003a24:	430a      	orrs	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a28:	e007      	b.n	8003a3a <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2101      	movs	r1, #1
 8003a36:	430a      	orrs	r2, r1
 8003a38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b004      	add	sp, #16
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40012c00 	.word	0x40012c00
 8003a48:	40014400 	.word	0x40014400
 8003a4c:	40014800 	.word	0x40014800
 8003a50:	40000400 	.word	0x40000400

08003a54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	223c      	movs	r2, #60	; 0x3c
 8003a64:	5c9b      	ldrb	r3, [r3, r2]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e0a7      	b.n	8003bbe <HAL_TIM_PWM_ConfigChannel+0x16a>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	223c      	movs	r2, #60	; 0x3c
 8003a72:	2101      	movs	r1, #1
 8003a74:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b0c      	cmp	r3, #12
 8003a7a:	d100      	bne.n	8003a7e <HAL_TIM_PWM_ConfigChannel+0x2a>
 8003a7c:	e076      	b.n	8003b6c <HAL_TIM_PWM_ConfigChannel+0x118>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b0c      	cmp	r3, #12
 8003a82:	d900      	bls.n	8003a86 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003a84:	e095      	b.n	8003bb2 <HAL_TIM_PWM_ConfigChannel+0x15e>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d04e      	beq.n	8003b2a <HAL_TIM_PWM_ConfigChannel+0xd6>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d900      	bls.n	8003a94 <HAL_TIM_PWM_ConfigChannel+0x40>
 8003a92:	e08e      	b.n	8003bb2 <HAL_TIM_PWM_ConfigChannel+0x15e>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d021      	beq.n	8003ae4 <HAL_TIM_PWM_ConfigChannel+0x90>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8003aa0:	e087      	b.n	8003bb2 <HAL_TIM_PWM_ConfigChannel+0x15e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	0011      	movs	r1, r2
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f000 f9ce 	bl	8003e4c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2108      	movs	r1, #8
 8003abc:	430a      	orrs	r2, r1
 8003abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699a      	ldr	r2, [r3, #24]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2104      	movs	r1, #4
 8003acc:	438a      	bics	r2, r1
 8003ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6999      	ldr	r1, [r3, #24]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	691a      	ldr	r2, [r3, #16]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	619a      	str	r2, [r3, #24]
      break;
 8003ae2:	e067      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	0011      	movs	r1, r2
 8003aec:	0018      	movs	r0, r3
 8003aee:	f000 fa2b 	bl	8003f48 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699a      	ldr	r2, [r3, #24]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2180      	movs	r1, #128	; 0x80
 8003afe:	0109      	lsls	r1, r1, #4
 8003b00:	430a      	orrs	r2, r1
 8003b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	492e      	ldr	r1, [pc, #184]	; (8003bc8 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8003b10:	400a      	ands	r2, r1
 8003b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6999      	ldr	r1, [r3, #24]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	021a      	lsls	r2, r3, #8
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	619a      	str	r2, [r3, #24]
      break;
 8003b28:	e044      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	0011      	movs	r1, r2
 8003b32:	0018      	movs	r0, r3
 8003b34:	f000 fa86 	bl	8004044 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69da      	ldr	r2, [r3, #28]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2108      	movs	r1, #8
 8003b44:	430a      	orrs	r2, r1
 8003b46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	69da      	ldr	r2, [r3, #28]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2104      	movs	r1, #4
 8003b54:	438a      	bics	r2, r1
 8003b56:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69d9      	ldr	r1, [r3, #28]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	61da      	str	r2, [r3, #28]
      break;
 8003b6a:	e023      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	0011      	movs	r1, r2
 8003b74:	0018      	movs	r0, r3
 8003b76:	f000 fae5 	bl	8004144 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69da      	ldr	r2, [r3, #28]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2180      	movs	r1, #128	; 0x80
 8003b86:	0109      	lsls	r1, r1, #4
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	69da      	ldr	r2, [r3, #28]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	490c      	ldr	r1, [pc, #48]	; (8003bc8 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8003b98:	400a      	ands	r2, r1
 8003b9a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69d9      	ldr	r1, [r3, #28]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	021a      	lsls	r2, r3, #8
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	61da      	str	r2, [r3, #28]
      break;
 8003bb0:	e000      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x160>
      break;
 8003bb2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	223c      	movs	r2, #60	; 0x3c
 8003bb8:	2100      	movs	r1, #0
 8003bba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b004      	add	sp, #16
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	fffffbff 	.word	0xfffffbff

08003bcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	223c      	movs	r2, #60	; 0x3c
 8003bda:	5c9b      	ldrb	r3, [r3, r2]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_TIM_ConfigClockSource+0x18>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e0b7      	b.n	8003d54 <HAL_TIM_ConfigClockSource+0x188>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	223c      	movs	r2, #60	; 0x3c
 8003be8:	2101      	movs	r1, #1
 8003bea:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	223d      	movs	r2, #61	; 0x3d
 8003bf0:	2102      	movs	r1, #2
 8003bf2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2277      	movs	r2, #119	; 0x77
 8003c00:	4393      	bics	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4a55      	ldr	r2, [pc, #340]	; (8003d5c <HAL_TIM_ConfigClockSource+0x190>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2280      	movs	r2, #128	; 0x80
 8003c1a:	0192      	lsls	r2, r2, #6
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d040      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0xd6>
 8003c20:	2280      	movs	r2, #128	; 0x80
 8003c22:	0192      	lsls	r2, r2, #6
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d900      	bls.n	8003c2a <HAL_TIM_ConfigClockSource+0x5e>
 8003c28:	e088      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x170>
 8003c2a:	2280      	movs	r2, #128	; 0x80
 8003c2c:	0152      	lsls	r2, r2, #5
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d100      	bne.n	8003c34 <HAL_TIM_ConfigClockSource+0x68>
 8003c32:	e085      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x174>
 8003c34:	2280      	movs	r2, #128	; 0x80
 8003c36:	0152      	lsls	r2, r2, #5
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d900      	bls.n	8003c3e <HAL_TIM_ConfigClockSource+0x72>
 8003c3c:	e07e      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x170>
 8003c3e:	2b70      	cmp	r3, #112	; 0x70
 8003c40:	d018      	beq.n	8003c74 <HAL_TIM_ConfigClockSource+0xa8>
 8003c42:	d900      	bls.n	8003c46 <HAL_TIM_ConfigClockSource+0x7a>
 8003c44:	e07a      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x170>
 8003c46:	2b60      	cmp	r3, #96	; 0x60
 8003c48:	d04f      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0x11e>
 8003c4a:	d900      	bls.n	8003c4e <HAL_TIM_ConfigClockSource+0x82>
 8003c4c:	e076      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x170>
 8003c4e:	2b50      	cmp	r3, #80	; 0x50
 8003c50:	d03b      	beq.n	8003cca <HAL_TIM_ConfigClockSource+0xfe>
 8003c52:	d900      	bls.n	8003c56 <HAL_TIM_ConfigClockSource+0x8a>
 8003c54:	e072      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x170>
 8003c56:	2b40      	cmp	r3, #64	; 0x40
 8003c58:	d057      	beq.n	8003d0a <HAL_TIM_ConfigClockSource+0x13e>
 8003c5a:	d900      	bls.n	8003c5e <HAL_TIM_ConfigClockSource+0x92>
 8003c5c:	e06e      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x170>
 8003c5e:	2b30      	cmp	r3, #48	; 0x30
 8003c60:	d063      	beq.n	8003d2a <HAL_TIM_ConfigClockSource+0x15e>
 8003c62:	d86b      	bhi.n	8003d3c <HAL_TIM_ConfigClockSource+0x170>
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d060      	beq.n	8003d2a <HAL_TIM_ConfigClockSource+0x15e>
 8003c68:	d868      	bhi.n	8003d3c <HAL_TIM_ConfigClockSource+0x170>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d05d      	beq.n	8003d2a <HAL_TIM_ConfigClockSource+0x15e>
 8003c6e:	2b10      	cmp	r3, #16
 8003c70:	d05b      	beq.n	8003d2a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003c72:	e063      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6818      	ldr	r0, [r3, #0]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	6899      	ldr	r1, [r3, #8]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f000 fb3c 	bl	8004300 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2277      	movs	r2, #119	; 0x77
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	609a      	str	r2, [r3, #8]
      break;
 8003ca0:	e04f      	b.n	8003d42 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	6899      	ldr	r1, [r3, #8]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f000 fb25 	bl	8004300 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2180      	movs	r1, #128	; 0x80
 8003cc2:	01c9      	lsls	r1, r1, #7
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	609a      	str	r2, [r3, #8]
      break;
 8003cc8:	e03b      	b.n	8003d42 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	6859      	ldr	r1, [r3, #4]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	001a      	movs	r2, r3
 8003cd8:	f000 fa98 	bl	800420c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2150      	movs	r1, #80	; 0x50
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f000 faf2 	bl	80042cc <TIM_ITRx_SetConfig>
      break;
 8003ce8:	e02b      	b.n	8003d42 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6859      	ldr	r1, [r3, #4]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	001a      	movs	r2, r3
 8003cf8:	f000 fab6 	bl	8004268 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2160      	movs	r1, #96	; 0x60
 8003d02:	0018      	movs	r0, r3
 8003d04:	f000 fae2 	bl	80042cc <TIM_ITRx_SetConfig>
      break;
 8003d08:	e01b      	b.n	8003d42 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	6859      	ldr	r1, [r3, #4]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	001a      	movs	r2, r3
 8003d18:	f000 fa78 	bl	800420c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2140      	movs	r1, #64	; 0x40
 8003d22:	0018      	movs	r0, r3
 8003d24:	f000 fad2 	bl	80042cc <TIM_ITRx_SetConfig>
      break;
 8003d28:	e00b      	b.n	8003d42 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	0019      	movs	r1, r3
 8003d34:	0010      	movs	r0, r2
 8003d36:	f000 fac9 	bl	80042cc <TIM_ITRx_SetConfig>
        break;
 8003d3a:	e002      	b.n	8003d42 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003d3c:	46c0      	nop			; (mov r8, r8)
 8003d3e:	e000      	b.n	8003d42 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003d40:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	223d      	movs	r2, #61	; 0x3d
 8003d46:	2101      	movs	r1, #1
 8003d48:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	223c      	movs	r2, #60	; 0x3c
 8003d4e:	2100      	movs	r1, #0
 8003d50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	0018      	movs	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b004      	add	sp, #16
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	ffff00ff 	.word	0xffff00ff

08003d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a30      	ldr	r2, [pc, #192]	; (8003e34 <TIM_Base_SetConfig+0xd4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d008      	beq.n	8003d8a <TIM_Base_SetConfig+0x2a>
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	05db      	lsls	r3, r3, #23
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d003      	beq.n	8003d8a <TIM_Base_SetConfig+0x2a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a2c      	ldr	r2, [pc, #176]	; (8003e38 <TIM_Base_SetConfig+0xd8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d108      	bne.n	8003d9c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2270      	movs	r2, #112	; 0x70
 8003d8e:	4393      	bics	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a25      	ldr	r2, [pc, #148]	; (8003e34 <TIM_Base_SetConfig+0xd4>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d014      	beq.n	8003dce <TIM_Base_SetConfig+0x6e>
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	2380      	movs	r3, #128	; 0x80
 8003da8:	05db      	lsls	r3, r3, #23
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d00f      	beq.n	8003dce <TIM_Base_SetConfig+0x6e>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a21      	ldr	r2, [pc, #132]	; (8003e38 <TIM_Base_SetConfig+0xd8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00b      	beq.n	8003dce <TIM_Base_SetConfig+0x6e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a20      	ldr	r2, [pc, #128]	; (8003e3c <TIM_Base_SetConfig+0xdc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d007      	beq.n	8003dce <TIM_Base_SetConfig+0x6e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a1f      	ldr	r2, [pc, #124]	; (8003e40 <TIM_Base_SetConfig+0xe0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d003      	beq.n	8003dce <TIM_Base_SetConfig+0x6e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a1e      	ldr	r2, [pc, #120]	; (8003e44 <TIM_Base_SetConfig+0xe4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d108      	bne.n	8003de0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4a1d      	ldr	r2, [pc, #116]	; (8003e48 <TIM_Base_SetConfig+0xe8>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2280      	movs	r2, #128	; 0x80
 8003de4:	4393      	bics	r3, r2
 8003de6:	001a      	movs	r2, r3
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a0a      	ldr	r2, [pc, #40]	; (8003e34 <TIM_Base_SetConfig+0xd4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d007      	beq.n	8003e1e <TIM_Base_SetConfig+0xbe>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a0b      	ldr	r2, [pc, #44]	; (8003e40 <TIM_Base_SetConfig+0xe0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d003      	beq.n	8003e1e <TIM_Base_SetConfig+0xbe>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a0a      	ldr	r2, [pc, #40]	; (8003e44 <TIM_Base_SetConfig+0xe4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d103      	bne.n	8003e26 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	691a      	ldr	r2, [r3, #16]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	615a      	str	r2, [r3, #20]
}
 8003e2c:	46c0      	nop			; (mov r8, r8)
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	b004      	add	sp, #16
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40012c00 	.word	0x40012c00
 8003e38:	40000400 	.word	0x40000400
 8003e3c:	40002000 	.word	0x40002000
 8003e40:	40014400 	.word	0x40014400
 8003e44:	40014800 	.word	0x40014800
 8003e48:	fffffcff 	.word	0xfffffcff

08003e4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	4393      	bics	r3, r2
 8003e5e:	001a      	movs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2270      	movs	r2, #112	; 0x70
 8003e7a:	4393      	bics	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2203      	movs	r2, #3
 8003e82:	4393      	bics	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2202      	movs	r2, #2
 8003e94:	4393      	bics	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a23      	ldr	r2, [pc, #140]	; (8003f34 <TIM_OC1_SetConfig+0xe8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d007      	beq.n	8003eba <TIM_OC1_SetConfig+0x6e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a22      	ldr	r2, [pc, #136]	; (8003f38 <TIM_OC1_SetConfig+0xec>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d003      	beq.n	8003eba <TIM_OC1_SetConfig+0x6e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a21      	ldr	r2, [pc, #132]	; (8003f3c <TIM_OC1_SetConfig+0xf0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d10c      	bne.n	8003ed4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2208      	movs	r2, #8
 8003ebe:	4393      	bics	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2204      	movs	r2, #4
 8003ed0:	4393      	bics	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a17      	ldr	r2, [pc, #92]	; (8003f34 <TIM_OC1_SetConfig+0xe8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d007      	beq.n	8003eec <TIM_OC1_SetConfig+0xa0>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a16      	ldr	r2, [pc, #88]	; (8003f38 <TIM_OC1_SetConfig+0xec>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d003      	beq.n	8003eec <TIM_OC1_SetConfig+0xa0>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <TIM_OC1_SetConfig+0xf0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d111      	bne.n	8003f10 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	4a14      	ldr	r2, [pc, #80]	; (8003f40 <TIM_OC1_SetConfig+0xf4>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	4a13      	ldr	r2, [pc, #76]	; (8003f44 <TIM_OC1_SetConfig+0xf8>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	621a      	str	r2, [r3, #32]
}
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b006      	add	sp, #24
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	40012c00 	.word	0x40012c00
 8003f38:	40014400 	.word	0x40014400
 8003f3c:	40014800 	.word	0x40014800
 8003f40:	fffffeff 	.word	0xfffffeff
 8003f44:	fffffdff 	.word	0xfffffdff

08003f48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	2210      	movs	r2, #16
 8003f58:	4393      	bics	r3, r2
 8003f5a:	001a      	movs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4a2c      	ldr	r2, [pc, #176]	; (8004028 <TIM_OC2_SetConfig+0xe0>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4a2b      	ldr	r2, [pc, #172]	; (800402c <TIM_OC2_SetConfig+0xe4>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	021b      	lsls	r3, r3, #8
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2220      	movs	r2, #32
 8003f92:	4393      	bics	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a22      	ldr	r2, [pc, #136]	; (8004030 <TIM_OC2_SetConfig+0xe8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d10d      	bne.n	8003fc6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2280      	movs	r2, #128	; 0x80
 8003fae:	4393      	bics	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2240      	movs	r2, #64	; 0x40
 8003fc2:	4393      	bics	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a19      	ldr	r2, [pc, #100]	; (8004030 <TIM_OC2_SetConfig+0xe8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d007      	beq.n	8003fde <TIM_OC2_SetConfig+0x96>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a18      	ldr	r2, [pc, #96]	; (8004034 <TIM_OC2_SetConfig+0xec>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d003      	beq.n	8003fde <TIM_OC2_SetConfig+0x96>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a17      	ldr	r2, [pc, #92]	; (8004038 <TIM_OC2_SetConfig+0xf0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d113      	bne.n	8004006 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4a16      	ldr	r2, [pc, #88]	; (800403c <TIM_OC2_SetConfig+0xf4>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	4a15      	ldr	r2, [pc, #84]	; (8004040 <TIM_OC2_SetConfig+0xf8>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	621a      	str	r2, [r3, #32]
}
 8004020:	46c0      	nop			; (mov r8, r8)
 8004022:	46bd      	mov	sp, r7
 8004024:	b006      	add	sp, #24
 8004026:	bd80      	pop	{r7, pc}
 8004028:	ffff8fff 	.word	0xffff8fff
 800402c:	fffffcff 	.word	0xfffffcff
 8004030:	40012c00 	.word	0x40012c00
 8004034:	40014400 	.word	0x40014400
 8004038:	40014800 	.word	0x40014800
 800403c:	fffffbff 	.word	0xfffffbff
 8004040:	fffff7ff 	.word	0xfffff7ff

08004044 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	4a33      	ldr	r2, [pc, #204]	; (8004120 <TIM_OC3_SetConfig+0xdc>)
 8004054:	401a      	ands	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2270      	movs	r2, #112	; 0x70
 8004070:	4393      	bics	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2203      	movs	r2, #3
 8004078:	4393      	bics	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	4a26      	ldr	r2, [pc, #152]	; (8004124 <TIM_OC3_SetConfig+0xe0>)
 800408a:	4013      	ands	r3, r2
 800408c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	021b      	lsls	r3, r3, #8
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	4313      	orrs	r3, r2
 8004098:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a22      	ldr	r2, [pc, #136]	; (8004128 <TIM_OC3_SetConfig+0xe4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d10d      	bne.n	80040be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	4a21      	ldr	r2, [pc, #132]	; (800412c <TIM_OC3_SetConfig+0xe8>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	021b      	lsls	r3, r3, #8
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	4a1d      	ldr	r2, [pc, #116]	; (8004130 <TIM_OC3_SetConfig+0xec>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a19      	ldr	r2, [pc, #100]	; (8004128 <TIM_OC3_SetConfig+0xe4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d007      	beq.n	80040d6 <TIM_OC3_SetConfig+0x92>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a1a      	ldr	r2, [pc, #104]	; (8004134 <TIM_OC3_SetConfig+0xf0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d003      	beq.n	80040d6 <TIM_OC3_SetConfig+0x92>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a19      	ldr	r2, [pc, #100]	; (8004138 <TIM_OC3_SetConfig+0xf4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d113      	bne.n	80040fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4a18      	ldr	r2, [pc, #96]	; (800413c <TIM_OC3_SetConfig+0xf8>)
 80040da:	4013      	ands	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4a17      	ldr	r2, [pc, #92]	; (8004140 <TIM_OC3_SetConfig+0xfc>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	621a      	str	r2, [r3, #32]
}
 8004118:	46c0      	nop			; (mov r8, r8)
 800411a:	46bd      	mov	sp, r7
 800411c:	b006      	add	sp, #24
 800411e:	bd80      	pop	{r7, pc}
 8004120:	fffffeff 	.word	0xfffffeff
 8004124:	fffffdff 	.word	0xfffffdff
 8004128:	40012c00 	.word	0x40012c00
 800412c:	fffff7ff 	.word	0xfffff7ff
 8004130:	fffffbff 	.word	0xfffffbff
 8004134:	40014400 	.word	0x40014400
 8004138:	40014800 	.word	0x40014800
 800413c:	ffffefff 	.word	0xffffefff
 8004140:	ffffdfff 	.word	0xffffdfff

08004144 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	4a26      	ldr	r2, [pc, #152]	; (80041ec <TIM_OC4_SetConfig+0xa8>)
 8004154:	401a      	ands	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4a20      	ldr	r2, [pc, #128]	; (80041f0 <TIM_OC4_SetConfig+0xac>)
 8004170:	4013      	ands	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4a1f      	ldr	r2, [pc, #124]	; (80041f4 <TIM_OC4_SetConfig+0xb0>)
 8004178:	4013      	ands	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	4a1b      	ldr	r2, [pc, #108]	; (80041f8 <TIM_OC4_SetConfig+0xb4>)
 800418c:	4013      	ands	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	031b      	lsls	r3, r3, #12
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a17      	ldr	r2, [pc, #92]	; (80041fc <TIM_OC4_SetConfig+0xb8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d007      	beq.n	80041b4 <TIM_OC4_SetConfig+0x70>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a16      	ldr	r2, [pc, #88]	; (8004200 <TIM_OC4_SetConfig+0xbc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d003      	beq.n	80041b4 <TIM_OC4_SetConfig+0x70>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a15      	ldr	r2, [pc, #84]	; (8004204 <TIM_OC4_SetConfig+0xc0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d109      	bne.n	80041c8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	4a14      	ldr	r2, [pc, #80]	; (8004208 <TIM_OC4_SetConfig+0xc4>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	019b      	lsls	r3, r3, #6
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	621a      	str	r2, [r3, #32]
}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	46bd      	mov	sp, r7
 80041e6:	b006      	add	sp, #24
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	ffffefff 	.word	0xffffefff
 80041f0:	ffff8fff 	.word	0xffff8fff
 80041f4:	fffffcff 	.word	0xfffffcff
 80041f8:	ffffdfff 	.word	0xffffdfff
 80041fc:	40012c00 	.word	0x40012c00
 8004200:	40014400 	.word	0x40014400
 8004204:	40014800 	.word	0x40014800
 8004208:	ffffbfff 	.word	0xffffbfff

0800420c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	2201      	movs	r2, #1
 8004224:	4393      	bics	r3, r2
 8004226:	001a      	movs	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	22f0      	movs	r2, #240	; 0xf0
 8004236:	4393      	bics	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	220a      	movs	r2, #10
 8004248:	4393      	bics	r3, r2
 800424a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	621a      	str	r2, [r3, #32]
}
 8004260:	46c0      	nop			; (mov r8, r8)
 8004262:	46bd      	mov	sp, r7
 8004264:	b006      	add	sp, #24
 8004266:	bd80      	pop	{r7, pc}

08004268 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	2210      	movs	r2, #16
 800427a:	4393      	bics	r3, r2
 800427c:	001a      	movs	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	4a0d      	ldr	r2, [pc, #52]	; (80042c8 <TIM_TI2_ConfigInputStage+0x60>)
 8004292:	4013      	ands	r3, r2
 8004294:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	031b      	lsls	r3, r3, #12
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4313      	orrs	r3, r2
 800429e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	22a0      	movs	r2, #160	; 0xa0
 80042a4:	4393      	bics	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	621a      	str	r2, [r3, #32]
}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b006      	add	sp, #24
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	ffff0fff 	.word	0xffff0fff

080042cc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2270      	movs	r2, #112	; 0x70
 80042e0:	4393      	bics	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	2207      	movs	r2, #7
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	609a      	str	r2, [r3, #8]
}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	46bd      	mov	sp, r7
 80042fa:	b004      	add	sp, #16
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	4a09      	ldr	r2, [pc, #36]	; (800433c <TIM_ETR_SetConfig+0x3c>)
 8004318:	4013      	ands	r3, r2
 800431a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	021a      	lsls	r2, r3, #8
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	431a      	orrs	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4313      	orrs	r3, r2
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	609a      	str	r2, [r3, #8]
}
 8004334:	46c0      	nop			; (mov r8, r8)
 8004336:	46bd      	mov	sp, r7
 8004338:	b006      	add	sp, #24
 800433a:	bd80      	pop	{r7, pc}
 800433c:	ffff00ff 	.word	0xffff00ff

08004340 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	221f      	movs	r2, #31
 8004350:	4013      	ands	r3, r2
 8004352:	2201      	movs	r2, #1
 8004354:	409a      	lsls	r2, r3
 8004356:	0013      	movs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	43d2      	mvns	r2, r2
 8004362:	401a      	ands	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a1a      	ldr	r2, [r3, #32]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	211f      	movs	r1, #31
 8004370:	400b      	ands	r3, r1
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	4099      	lsls	r1, r3
 8004376:	000b      	movs	r3, r1
 8004378:	431a      	orrs	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	621a      	str	r2, [r3, #32]
}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	46bd      	mov	sp, r7
 8004382:	b006      	add	sp, #24
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	223c      	movs	r2, #60	; 0x3c
 8004396:	5c9b      	ldrb	r3, [r3, r2]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800439c:	2302      	movs	r3, #2
 800439e:	e042      	b.n	8004426 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	223c      	movs	r2, #60	; 0x3c
 80043a4:	2101      	movs	r1, #1
 80043a6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	223d      	movs	r2, #61	; 0x3d
 80043ac:	2102      	movs	r1, #2
 80043ae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2270      	movs	r2, #112	; 0x70
 80043c4:	4393      	bics	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a14      	ldr	r2, [pc, #80]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d00a      	beq.n	80043fa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	2380      	movs	r3, #128	; 0x80
 80043ea:	05db      	lsls	r3, r3, #23
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d004      	beq.n	80043fa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a0f      	ldr	r2, [pc, #60]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d10c      	bne.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2280      	movs	r2, #128	; 0x80
 80043fe:	4393      	bics	r3, r2
 8004400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	4313      	orrs	r3, r2
 800440a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	223d      	movs	r2, #61	; 0x3d
 8004418:	2101      	movs	r1, #1
 800441a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	223c      	movs	r2, #60	; 0x3c
 8004420:	2100      	movs	r1, #0
 8004422:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	0018      	movs	r0, r3
 8004428:	46bd      	mov	sp, r7
 800442a:	b004      	add	sp, #16
 800442c:	bd80      	pop	{r7, pc}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	40012c00 	.word	0x40012c00
 8004434:	40000400 	.word	0x40000400

08004438 <__libc_init_array>:
 8004438:	b570      	push	{r4, r5, r6, lr}
 800443a:	2600      	movs	r6, #0
 800443c:	4d0c      	ldr	r5, [pc, #48]	; (8004470 <__libc_init_array+0x38>)
 800443e:	4c0d      	ldr	r4, [pc, #52]	; (8004474 <__libc_init_array+0x3c>)
 8004440:	1b64      	subs	r4, r4, r5
 8004442:	10a4      	asrs	r4, r4, #2
 8004444:	42a6      	cmp	r6, r4
 8004446:	d109      	bne.n	800445c <__libc_init_array+0x24>
 8004448:	2600      	movs	r6, #0
 800444a:	f000 f821 	bl	8004490 <_init>
 800444e:	4d0a      	ldr	r5, [pc, #40]	; (8004478 <__libc_init_array+0x40>)
 8004450:	4c0a      	ldr	r4, [pc, #40]	; (800447c <__libc_init_array+0x44>)
 8004452:	1b64      	subs	r4, r4, r5
 8004454:	10a4      	asrs	r4, r4, #2
 8004456:	42a6      	cmp	r6, r4
 8004458:	d105      	bne.n	8004466 <__libc_init_array+0x2e>
 800445a:	bd70      	pop	{r4, r5, r6, pc}
 800445c:	00b3      	lsls	r3, r6, #2
 800445e:	58eb      	ldr	r3, [r5, r3]
 8004460:	4798      	blx	r3
 8004462:	3601      	adds	r6, #1
 8004464:	e7ee      	b.n	8004444 <__libc_init_array+0xc>
 8004466:	00b3      	lsls	r3, r6, #2
 8004468:	58eb      	ldr	r3, [r5, r3]
 800446a:	4798      	blx	r3
 800446c:	3601      	adds	r6, #1
 800446e:	e7f2      	b.n	8004456 <__libc_init_array+0x1e>
 8004470:	080044d8 	.word	0x080044d8
 8004474:	080044d8 	.word	0x080044d8
 8004478:	080044d8 	.word	0x080044d8
 800447c:	080044dc 	.word	0x080044dc

08004480 <memset>:
 8004480:	0003      	movs	r3, r0
 8004482:	1882      	adds	r2, r0, r2
 8004484:	4293      	cmp	r3, r2
 8004486:	d100      	bne.n	800448a <memset+0xa>
 8004488:	4770      	bx	lr
 800448a:	7019      	strb	r1, [r3, #0]
 800448c:	3301      	adds	r3, #1
 800448e:	e7f9      	b.n	8004484 <memset+0x4>

08004490 <_init>:
 8004490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004496:	bc08      	pop	{r3}
 8004498:	469e      	mov	lr, r3
 800449a:	4770      	bx	lr

0800449c <_fini>:
 800449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044a2:	bc08      	pop	{r3}
 80044a4:	469e      	mov	lr, r3
 80044a6:	4770      	bx	lr
